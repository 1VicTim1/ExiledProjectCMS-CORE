
// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\Models\AuditLog.cs
using System;

namespace MainApi.Models
{
    public class AuditLog
    {
        public int Id { get; set; }
        public int? UserId { get; set; }
        public int? ApiTokenId { get; set; }
        public string Action { get; set; } = null!;
        public string? Details { get; set; }
        public string? TokenName { get; set; }
        public string? IpAddress { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;

        // Backwards-compat aliases for existing code
        public string? Ip { get => IpAddress; set => IpAddress = value; }
        public DateTime CreatedAt { get => Timestamp; set => Timestamp = value; }
    }
}



// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\Models\RolePermissionModels.cs
using System.Collections.Generic;

namespace MainApi.Models
{
    public class Role
    {
        public int Id { get; set; }
        public string Name { get; set; } // Отображаемое имя
        public string Code { get; set; } // Кодовое имя (только латиница, без спецсимволов)
        public string Color { get; set; } // HEX-цвет
        public string LogoUrl { get; set; } // URL лого
        public int? ParentRoleId { get; set; } // Родительская роль
        public Role ParentRole { get; set; }
        public ICollection<RolePermission> RolePermissions { get; set; }
        public ICollection<UserRole> UserRoles { get; set; }
    }

    public class Permission
    {
        public int Id { get; set; }
        public string Name { get; set; } // Название разрешения
        public string Code { get; set; } // Кодовое имя разрешения
        public string Description { get; set; }
        public ICollection<RolePermission> RolePermissions { get; set; }
        public ICollection<UserPermission> UserPermissions { get; set; }
    }

    public class RolePermission
    {
        public int RoleId { get; set; }
        public Role Role { get; set; }
        public int PermissionId { get; set; }
        public Permission Permission { get; set; }
    }

    public class UserRole
    {
        public int UserId { get; set; }
        public int RoleId { get; set; }
        public Role Role { get; set; }
    }

    public class UserPermission
    {
        public int UserId { get; set; }
        public int PermissionId { get; set; }
        public Permission Permission { get; set; }
    }

    public class Ticket
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Status { get; set; } // open, closed, etc.
        public int CreatedBy { get; set; }
        public int? AssignedTo { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? ClosedAt { get; set; }
    }

    public class PageAccess
    {
        public int Id { get; set; }
        public string Path { get; set; } // /admin, /tickets, /roles и т.д.
        public int PermissionId { get; set; }
        public Permission Permission { get; set; }
    }

    public class ApiToken
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public string Token { get; set; } // Хэш токена
        public string Name { get; set; } // Название токена (для удобства)
        public DateTime CreatedAt { get; set; }
        public DateTime? ExpiresAt { get; set; }
        public List<TokenPermission> Permissions { get; set; } = new();
    }

}


// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\Models\TokenPermission.cs
using System.ComponentModel.DataAnnotations.Schema;

namespace MainApi.Models
{
    public class TokenPermission
    {
        public int TokenId { get; set; }
        public ApiToken Token { get; set; } = null!;
        public int PermissionId { get; set; }
        public Permission Permission { get; set; } = null!;
    }
}



// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\obj\Debug\net8.0\MainApi.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("MainApi")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+36510cd406a36976ff997880a577b22e1e600e2e")]
[assembly: System.Reflection.AssemblyProductAttribute("MainApi")]
[assembly: System.Reflection.AssemblyTitleAttribute("MainApi")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Создано классом WriteCodeFragment MSBuild.



// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\obj\Debug\net8.0\MainApi.GlobalUsings.g.cs
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;


// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\obj\Debug\net8.0\MainApi.MvcApplicationPartsAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Prometheus.AspNetCore")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Создано классом WriteCodeFragment MSBuild.



// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\Program.AppHelpers.cs
using System.Text;
using System.Security.Cryptography;
using Microsoft.EntityFrameworkCore;

internal static class AppHelpers
{
    // --- Helpers for .env and connection strings ---
    public static void LoadDotEnv(string contentRootPath)
    {
        try
        {
            var path = Path.Combine(contentRootPath, ".env");
            if (!File.Exists(path)) return;
            foreach (var rawLine in File.ReadAllLines(path))
            {
                var line = rawLine.Trim();
                if (string.IsNullOrWhiteSpace(line)) continue;
                if (line.StartsWith("#")) continue;
                var idx = line.IndexOf('=');
                if (idx <= 0) continue;
                var key = line.Substring(0, idx).Trim();
                var value = line.Substring(idx + 1).Trim();
                // Strip optional surrounding quotes
                if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    value = value.Substring(1, value.Length - 2);
                Environment.SetEnvironmentVariable(key, value);
            }
        }
        catch
        {
            // Ignore .env parsing errors on purpose
        }
    }

    public static string BuildMySqlConnectionString(string? host, string? port, string? db, string? user, string? password)
    {
        host ??= "localhost";
        port = string.IsNullOrWhiteSpace(port) ? "3306" : port;
        db ??= "exiledcms";
        user ??= "root";
        password ??= string.Empty;
        return $"Server={host};Port={port};Database={db};User={user};Password={password};TreatTinyAsBoolean=true;";
    }

    public static string BuildPostgresConnectionString(string? host, string? port, string? db, string? user, string? password, string? sslMode)
    {
        host ??= "localhost";
        port = string.IsNullOrWhiteSpace(port) ? "5432" : port;
        db ??= "exiledcms";
        user ??= "postgres";
        password ??= string.Empty;
        sslMode = string.IsNullOrWhiteSpace(sslMode) ? "Disable" : sslMode;
        return $"Host={host};Port={port};Database={db};Username={user};Password={password};SslMode={sslMode};";
    }

    // --- Database seed ---
    public static void SeedDatabase(MainDbContext ctx)
    {
        string? adminLogin;
        if (!ctx.Users.Any())
        {
            adminLogin = Environment.GetEnvironmentVariable("ADMIN_LOGIN") ?? "admin";
            var adminPassword = Environment.GetEnvironmentVariable("ADMIN_PASSWORD") ?? "admin123";
            bool.TryParse(Environment.GetEnvironmentVariable("ADMIN_REQUIRE2FA"), out var adminRequire2FA);
            bool.TryParse(Environment.GetEnvironmentVariable("ADMIN_IS_BANNED"), out var adminIsBanned);
            var adminBanReason = Environment.GetEnvironmentVariable("ADMIN_BAN_REASON");

            var adminSalt = PasswordHasher.GenerateSalt();
            ctx.Users.Add(new User
            {
                Login = adminLogin,
                PasswordSalt = adminSalt,
                PasswordHash = PasswordHasher.HashPassword(adminPassword, adminSalt),
                // Initial admin must set up 2FA on first login
                Require2FA = false,
                TwoFactorEnabled = false,
                MustSetup2FA = true,
                IsBanned = adminIsBanned,
                BanReason = string.IsNullOrWhiteSpace(adminBanReason) ? null : adminBanReason
            });

            var testerSalt = PasswordHasher.GenerateSalt();
            ctx.Users.Add(new User
            {
                Login = "tester",
                PasswordSalt = testerSalt,
                PasswordHash = PasswordHasher.HashPassword("test123", testerSalt),
                Require2FA = true,
                IsBanned = false
            });

            var bannedSalt = PasswordHasher.GenerateSalt();
            ctx.Users.Add(new User
            {
                Login = "banned",
                PasswordSalt = bannedSalt,
                PasswordHash = PasswordHasher.HashPassword("banned123", bannedSalt),
                Require2FA = false,
                IsBanned = true,
                BanReason = "Раздача на спавне"
            });
        }

        if (!ctx.News.Any())
        {
            ctx.News.AddRange(new[]
            {
                new NewsItem { Id = 1, Title = "Заголовок новости", Description = "Содержание новости", CreatedAt = DateTime.UtcNow.AddDays(-2) },
                new NewsItem { Id = 2, Title = "Другая новость", Description = "Текст другой новости", CreatedAt = DateTime.UtcNow.AddDays(-1) },
                new NewsItem { Id = 3, Title = "Третья новость", Description = "Немного текста", CreatedAt = DateTime.UtcNow }
            });
        }

        // --- Seed roles and permissions ---
        adminLogin = Environment.GetEnvironmentVariable("ADMIN_LOGIN") ?? "admin";
        var adminRole = ctx.Roles.FirstOrDefault(r => r.Code == "admin");
        if (adminRole == null)
        {
            adminRole = new MainApi.Models.Role { Name = "Администратор", Code = "admin", Color = "#800080", LogoUrl = "", ParentRoleId = null };
            ctx.Roles.Add(adminRole);
            ctx.SaveChanges();
        }
        var userRole = ctx.Roles.FirstOrDefault(r => r.Code == "user");
        if (userRole == null)
        {
            userRole = new MainApi.Models.Role { Name = "Пользователь", Code = "user", Color = "#6f42c1", LogoUrl = "", ParentRoleId = null };
            ctx.Roles.Add(userRole);
            ctx.SaveChanges();
        }
        // --- Permissions ---
        var permissions = new[]
        {
            new MainApi.Models.Permission { Name = "Доступ к главной странице", Code = "access_home", Description = "Доступ к главной странице" },
            new MainApi.Models.Permission { Name = "Доступ к странице входа", Code = "access_login", Description = "Доступ к странице входа" },
            new MainApi.Models.Permission { Name = "Управление ролями", Code = "manage_roles", Description = "Доступ к матрице ролей и разрешений" },
            new MainApi.Models.Permission { Name = "Управление новостями", Code = "manage_news", Description = "Добавление и изменение новостей" },
            new MainApi.Models.Permission { Name = "Доступ к конструктору страниц", Code = "page_builder", Description = "Доступ к визуальному редактору страниц" },
            // Ticket permissions
            new MainApi.Models.Permission { Name = "Создание тикетов", Code = "create_ticket", Description = "Создание тикетов" },
            new MainApi.Models.Permission { Name = "Закрытие тикетов", Code = "close_ticket", Description = "Закрытие тикетов" },
            new MainApi.Models.Permission { Name = "Удаление тикетов", Code = "delete_ticket", Description = "Удаление тикетов" },
            new MainApi.Models.Permission { Name = "Просмотр всех тикетов", Code = "view_all_tickets", Description = "Просмотр тикетов других пользователей" },
            new MainApi.Models.Permission { Name = "Управление API токенами", Code = "api_token", Description = "Получение и управление API токенами для интеграций" },
            new MainApi.Models.Permission { Name = "Просмотр логов действий", Code = "audit_log_view", Description = "Просмотр логов действий пользователей и токенов" },
            new MainApi.Models.Permission { Name = "Управление логами действий", Code = "audit_log_manage", Description = "Удаление и очистка логов действий" },
            new MainApi.Models.Permission { Name = "Просмотр всех API токенов", Code = "api_token_view_all", Description = "Просмотр всех токенов и их владельцев" },
            new MainApi.Models.Permission { Name = "Удаление любых API токенов", Code = "api_token_delete_all", Description = "Удаление любых токенов, а не только своих" },
        };
        foreach (var perm in permissions)
        {
            if (!ctx.Permissions.Any(p => p.Code == perm.Code))
                ctx.Permissions.Add(perm);
        }
        ctx.SaveChanges();
        // --- Назначение всех разрешений админу ---
        var allPerms = ctx.Permissions.ToList();
        foreach (var perm in allPerms)
        {
            if (!ctx.RolePermissions.Any(rp => rp.RoleId == adminRole.Id && rp.PermissionId == perm.Id))
                ctx.RolePermissions.Add(new MainApi.Models.RolePermission { RoleId = adminRole.Id, PermissionId = perm.Id });
        }
        ctx.SaveChanges();
        // --- Назначение базовых разрешений обычному пользователю ---
        var userPerms = ctx.Permissions.Where(p => p.Code == "access_home" || p.Code == "access_login").ToList();
        foreach (var perm in userPerms)
        {
            if (!ctx.RolePermissions.Any(rp => rp.RoleId == userRole.Id && rp.PermissionId == perm.Id))
                ctx.RolePermissions.Add(new MainApi.Models.RolePermission { RoleId = userRole.Id, PermissionId = perm.Id });
        }
        ctx.SaveChanges();
        // --- Назначение роли админу из .env ---
        var adminUser = ctx.Users.FirstOrDefault(u => u.Login == adminLogin);
        if (adminUser != null && !ctx.UserRoles.Any(ur => ur.UserId == adminUser.Id && ur.RoleId == adminRole.Id))
        {
            ctx.UserRoles.Add(new MainApi.Models.UserRole { UserId = adminUser.Id, RoleId = adminRole.Id });
            ctx.SaveChanges();
        }
    }

    // --- Универсальная функция логирования действий ---
    public static async Task LogAuditAsync(MainDbContext? db, int? userId, int? apiTokenId, string action, string? details, string? ip)
    {
        if (db == null) return;
        db.AuditLogs.Add(new MainApi.Models.AuditLog
        {
            UserId = userId,
            ApiTokenId = apiTokenId,
            Action = action,
            Details = details,
            Ip = ip,
            CreatedAt = DateTime.UtcNow
        });
        await db.SaveChangesAsync();
    }
}


// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\src\MainApi\Program.cs
using Microsoft.EntityFrameworkCore;
using System.Text.Json.Serialization;
using Prometheus;
using System.Security.Cryptography;
using System.Text;
using Microsoft.OpenApi.Models;
using QRCoder;
using OtpNet;

var builder = WebApplication.CreateBuilder(args);

// Basic configuration
builder.Services.Configure<RouteOptions>(o => o.LowercaseUrls = true);

// Configuration via .env
AppHelpers.LoadDotEnv(builder.Environment.ContentRootPath);



// Database configuration from environment
var dbProvider = Environment.GetEnvironmentVariable("DB_PROVIDER")?.Trim().ToLowerInvariant();
var dbHost = Environment.GetEnvironmentVariable("DB_HOST");
var dbPort = Environment.GetEnvironmentVariable("DB_PORT");
var dbName = Environment.GetEnvironmentVariable("DB_NAME");
var dbUser = Environment.GetEnvironmentVariable("DB_USER");
var dbPassword = Environment.GetEnvironmentVariable("DB_PASSWORD");
var dbSslMode = Environment.GetEnvironmentVariable("DB_SSLMODE"); // optional (Postgres)

var dbConfigured = false;

if (dbProvider == "mysql")
{
    // If using MySQL root user, use the root password from MYSQL_ROOT_PASSWORD to avoid mismatch with DB_PASSWORD
    var effectivePassword = dbPassword;
    if (!string.IsNullOrWhiteSpace(dbUser) && dbUser.Equals("root", StringComparison.OrdinalIgnoreCase))
    {
        var rootPwd = Environment.GetEnvironmentVariable("MYSQL_ROOT_PASSWORD");
        if (!string.IsNullOrWhiteSpace(rootPwd))
        {
            effectivePassword = rootPwd;
        }
    }
    var conn = AppHelpers.BuildMySqlConnectionString(dbHost, dbPort, dbName, dbUser, effectivePassword);
    // Avoid opening a DB connection during service registration (ServerVersion.AutoDetect connects immediately).
    // Use Pomelo's ServerVersion.AutoDetect for broad compatibility across package versions.
    builder.Services.AddDbContext<MainDbContext>(options =>
        options.UseMySql(conn, ServerVersion.AutoDetect(conn)));
    builder.Services.AddScoped<IUserRepository, EfUserRepository>();
    builder.Services.AddScoped<INewsRepository, EfNewsRepository>();
    dbConfigured = true;
}
else if (dbProvider == "postgres" || dbProvider == "postgresql")
{
    var conn = AppHelpers.BuildPostgresConnectionString(dbHost, dbPort, dbName, dbUser, dbPassword, dbSslMode);
    builder.Services.AddDbContext<MainDbContext>(options =>
        options.UseNpgsql(conn));
    builder.Services.AddScoped<IUserRepository, EfUserRepository>();
    builder.Services.AddScoped<INewsRepository, EfNewsRepository>();
    dbConfigured = true;
}

if (!dbConfigured)
{
    // Fallback to in-memory repositories
    builder.Services.AddSingleton<IUserRepository, InMemoryUserRepository>();
    builder.Services.AddSingleton<INewsRepository, InMemoryNewsRepository>();
}

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "ExiledProject CMS API",
        Version = "v1",
        Description = "Core API for ExiledProject CMS (GML integration, auth, news, health, metrics)."
    });
});

var app = builder.Build();

var swaggerEnabled = string.Equals(Environment.GetEnvironmentVariable("SWAGGER_ENABLED"), "true", StringComparison.OrdinalIgnoreCase);

if (app.Environment.IsDevelopment() || swaggerEnabled)
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "ExiledProject CMS API v1");
        c.RoutePrefix = "swagger"; // served at /swagger
    });
}

// Static files for minimal frontend
app.UseDefaultFiles();
app.UseStaticFiles();

// Optional HTTPS redirection (disabled by default for containers)
var httpsRedirectEnabled = string.Equals(Environment.GetEnvironmentVariable("HTTPS_REDIRECT_ENABLED"), "true", StringComparison.OrdinalIgnoreCase);
if (httpsRedirectEnabled)
{
    app.UseHttpsRedirection();
}

// Prometheus metrics
app.UseHttpMetrics();
app.MapMetrics();

// If a database is configured, ensure it exists and seed initial data
try
{
    using var scope = app.Services.CreateScope();
    var ctx = scope.ServiceProvider.GetService<MainDbContext>();
    if (ctx != null)
    {
        ctx.Database.EnsureCreated();
        AppHelpers.SeedDatabase(ctx);
    }
}
catch (Exception ex)
{
    Console.WriteLine($"[Startup] Warning: database initialization failed: {ex.GetType().Name} - {ex.Message}");
    // Continue running; repository calls may fail until DB becomes available.
}

// Health
app.MapGet("/health", () => Results.Ok(new { status = "ok" }));

// GML: Custom Auth Integration
app.MapPost("/api/v1/integrations/auth/signin", async (AuthRequest request, IUserRepository users, HttpContext http) =>
{
    if (string.IsNullOrWhiteSpace(request.Login) || string.IsNullOrWhiteSpace(request.Password))
    {
        return Results.Unauthorized(); // 401
    }

    var user = await users.FindByLoginAsync(request.Login);
    if (user is null)
    {
        return Results.NotFound(new { Message = "Пользователь не найден" }); // 404
    }

    if (user.IsBanned)
    {
        var msg = string.IsNullOrWhiteSpace(user.BanReason)
            ? "Пользователь заблокирован"
            : $"Пользователь заблокирован. Причина: {user.BanReason}";
        return Results.Json(new { Message = msg }, statusCode: StatusCodes.Status403Forbidden); // 403
    }

    // Enforce initial 2FA setup for accounts that must set it up (e.g., first admin login)
    if (user.MustSetup2FA && !user.TwoFactorEnabled)
    {
        return Results.Json(new { Message = "Аккаунт заблокирован до привязки 2FA. Перейдите к настройке двухфакторной аутентификации." }, statusCode: StatusCodes.Status403Forbidden);
    }

    // If 2FA is required, GML expects 401 with a message prompting 2FA input
    if (user.Require2FA)
    {
        return Results.Json(new { Message = "Введите проверочный код 2FA" }, statusCode: StatusCodes.Status401Unauthorized); // 401
    }

    var valid = PasswordHasher.VerifyPassword(request.Password, user.PasswordHash, user.PasswordSalt);
    if (!valid)
    {
        await AppHelpers.LogAuditAsync(null, null, null, "login_fail", $"login={request.Login}", http.Connection.RemoteIpAddress?.ToString());
        return Results.Json(new { Message = "Неверный логин или пароль" }, statusCode: StatusCodes.Status401Unauthorized); // 401
    }
    await AppHelpers.LogAuditAsync(null, null, null, "login_success", $"login={request.Login}", http.Connection.RemoteIpAddress?.ToString());

    // 200 OK — success (response body is optional per docs). Include helpful fields.
    return Results.Ok(new
    {
        Login = user.Login,
        UserUuid = user.UserUuid,
        Message = "Успешная авторизация"
    });
});

// News endpoint for GML import
app.MapGet("/api/news", async (int? limit, int? offset, INewsRepository newsRepo) =>
{
    var items = await newsRepo.GetAsync(limit ?? 10, offset ?? 0);
    var shaped = items.Select(n => new
    {
        id = n.Id,
        title = n.Title,
        description = n.Description,
        createdAt = n.CreatedAt.ToUniversalTime().ToString("o")
    });
    return Results.Ok(shaped);
});

// --- Minimal Web login endpoints (for initial admin 2FA setup) ---
app.MapPost("/api/web/login", async (AuthRequest request, IUserRepository users, HttpContext http) =>
{
    var user = await users.FindByLoginAsync(request.Login);
    if (user is null)
    {
        await AppHelpers.LogAuditAsync(null, null, null, "web_login_fail", $"login={request.Login}", http.Connection.RemoteIpAddress?.ToString());
        return Results.NotFound(new { Message = "Пользователь не найден" });
    }
    if (!PasswordHasher.VerifyPassword(request.Password, user.PasswordHash, user.PasswordSalt))
    {
        await AppHelpers.LogAuditAsync(null, user.Id, null, "web_login_fail", $"login={request.Login}", http.Connection.RemoteIpAddress?.ToString());
        return Results.Json(new { Message = "Неверный логин или пароль" }, statusCode: StatusCodes.Status401Unauthorized);
    }
    await AppHelpers.LogAuditAsync(null, user.Id, null, "web_login_success", $"login={request.Login}", http.Connection.RemoteIpAddress?.ToString());

    if (user.IsBanned)
    {
        var msg = string.IsNullOrWhiteSpace(user.BanReason) ? "Пользователь заблокирован" : $"Пользователь заблокирован. Причина: {user.BanReason}";
        return Results.Json(new { Message = msg }, statusCode: StatusCodes.Status403Forbidden);
    }

    if (user.MustSetup2FA && !user.TwoFactorEnabled)
    {
        return Results.Json(new { Next = "setup-2fa", Message = "Требуется настроить 2FA" }, statusCode: StatusCodes.Status403Forbidden);
    }

    if (user.Require2FA)
    {
        return Results.Json(new { Next = "enter-2fa", Message = "Введите код 2FA" }, statusCode: StatusCodes.Status401Unauthorized);
    }

    return Results.Ok(new { Message = "Успешная авторизация" });
});

app.MapPost("/api/web/2fa/start", async (TwoFaStartRequest req, IUserRepository users) =>
{
    var user = await users.FindByLoginAsync(req.Login);
    if (user is null) return Results.NotFound(new { Message = "Пользователь не найден" });

    // Generate secret and QR
    var secretKey = KeyGeneration.GenerateRandomKey(20); // 160-bit
    var base32Secret = Base32Encoding.ToString(secretKey);
    user.TwoFactorSecret = base32Secret;
    user.TwoFactorEnabled = false;
    await users.UpdateAsync(user);

    var issuer = Uri.EscapeDataString(req.Issuer ?? "ExiledCMS");
    var account = Uri.EscapeDataString(user.Login);
    var otpauth = $"otpauth://totp/{issuer}:{account}?secret={base32Secret}&issuer={issuer}&digits=6&period=30&algorithm=SHA1";

    // Create QR PNG as data URL
    using var qrGen = new QRCodeGenerator();
    var qrData = qrGen.CreateQrCode(otpauth, QRCodeGenerator.ECCLevel.Q);
    using var qrCode = new PngByteQRCode(qrData);
    var png = qrCode.GetGraphic(10);
    var dataUrl = "data:image/png;base64," + Convert.ToBase64String(png);

    return Results.Ok(new { Secret = base32Secret, OtpauthUri = otpauth, QrCodeDataUrl = dataUrl });
});

app.MapPost("/api/web/2fa/verify", async (TwoFaVerifyRequest req, IUserRepository users) =>
{
    var user = await users.FindByLoginAsync(req.Login);
    if (user is null) return Results.NotFound(new { Message = "Пользователь не найден" });
    if (string.IsNullOrWhiteSpace(user.TwoFactorSecret)) return Results.BadRequest(new { Message = "2FA не инициализирована" });

    var totp = new Totp(Base32Encoding.ToBytes(user.TwoFactorSecret));
    var isValid = totp.VerifyTotp(req.Code?.Trim() ?? string.Empty, out _, VerificationWindow.RfcSpecifiedNetworkDelay);
    if (!isValid) return Results.Json(new { Message = "Неверный код 2FA" }, statusCode: StatusCodes.Status401Unauthorized);

    user.TwoFactorEnabled = true;
    user.Require2FA = true;
    user.MustSetup2FA = false;
    await users.UpdateAsync(user);

    return Results.Ok(new { Message = "2FA успешно привязана" });
});

// --- Role & Permission API ---
app.MapGet("/api/roles", async (MainDbContext db) =>
{
    var roles = await db.Roles.Include(r => r.RolePermissions).ToListAsync();
    return Results.Ok(roles);
});

app.MapGet("/api/permissions", async (MainDbContext db) =>
{
    var perms = await db.Permissions.Include(p => p.RolePermissions).ToListAsync();
    return Results.Ok(perms);
});

app.MapPost("/api/roles", async (MainDbContext db, MainApi.Models.Role role, HttpContext http) =>
{
    db.Roles.Add(role);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, null, null, "role_create", $"name={role.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Created($"/api/roles/{role.Id}", role);
});

app.MapPut("/api/roles/{id}", async (MainDbContext db, int id, MainApi.Models.Role updated, HttpContext http) =>
{
    var role = await db.Roles.FindAsync(id);
    if (role == null) return Results.NotFound();
    role.Name = updated.Name;
    role.Code = updated.Code;
    role.Color = updated.Color;
    role.LogoUrl = updated.LogoUrl;
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, null, null, "role_update", $"id={id},name={updated.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Ok(role);
});

app.MapDelete("/api/roles/{id}", async (MainDbContext db, int id, HttpContext http) =>
{
    var role = await db.Roles.FindAsync(id);
    if (role == null) return Results.NotFound();
    db.Roles.Remove(role);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, null, null, "role_delete", $"id={id},name={role.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.NoContent();
});

app.MapPost("/api/permissions", async (MainDbContext db, MainApi.Models.Permission perm, HttpContext http) =>
{
    db.Permissions.Add(perm);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, null, null, "permission_create", $"name={perm.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Created($"/api/permissions/{perm.Id}", perm);
});

app.MapPut("/api/permissions/{id}", async (MainDbContext db, int id, MainApi.Models.Permission updated, HttpContext http) =>
{
    var perm = await db.Permissions.FindAsync(id);
    if (perm == null) return Results.NotFound();
    perm.Name = updated.Name;
    perm.Code = updated.Code;
    perm.Description = updated.Description;
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, null, null, "permission_update", $"id={id},name={updated.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Ok(perm);
});

app.MapDelete("/api/permissions/{id}", async (MainDbContext db, int id, HttpContext http) =>
{
    var perm = await db.Permissions.FindAsync(id);
    if (perm == null) return Results.NotFound();
    db.Permissions.Remove(perm);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, null, null, "permission_delete", $"id={id},name={perm.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.NoContent();
});

// --- Ticket API ---
app.MapGet("/api/tickets", async (MainDbContext db, int userId) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (perms.Contains("view_all_tickets"))
        return Results.Ok(await db.Tickets.ToListAsync());
    var own = await db.Tickets.Where(t => t.CreatedBy == userId).ToListAsync();
    return Results.Ok(own);
});

app.MapPost("/api/tickets", async (MainDbContext db, int userId, MainApi.Models.Ticket ticket, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("create_ticket")) return Results.Forbid();
    ticket.CreatedBy = userId;
    ticket.Status = "open";
    ticket.CreatedAt = DateTime.UtcNow;
    db.Tickets.Add(ticket);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, userId, null, "ticket_create", $"title={ticket.Title}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Created($"/api/tickets/{ticket.Id}", ticket);
});

app.MapPut("/api/tickets/{id}/close", async (MainDbContext db, int userId, int id, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("close_ticket")) return Results.Forbid();
    var ticket = await db.Tickets.FindAsync(id);
    if (ticket == null) return Results.NotFound();
    ticket.Status = "closed";
    ticket.ClosedAt = DateTime.UtcNow;
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, userId, null, "ticket_close", $"id={id}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Ok(ticket);
});

app.MapDelete("/api/tickets/{id}", async (MainDbContext db, int userId, int id, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("delete_ticket")) return Results.Forbid();
    var ticket = await db.Tickets.FindAsync(id);
    if (ticket == null) return Results.NotFound();
    db.Tickets.Remove(ticket);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, userId, null, "ticket_delete", $"id={id},title={ticket.Title}", http.Connection.RemoteIpAddress?.ToString());
    return Results.NoContent();
});

// --- Page Access API ---
app.MapGet("/api/pages", async (MainDbContext db) =>
{
    var pages = await db.PageAccesses.Include(p => p.Permission).ToListAsync();
    return Results.Ok(pages.Select(p => new { p.Id, p.Path, PermissionName = p.Permission.Name, PermissionCode = p.Permission.Code }));
});

app.MapPost("/api/pages", async (MainDbContext db, string path, string permissionCode) =>
{
    var perm = await db.Permissions.FirstOrDefaultAsync(p => p.Code == permissionCode);
    if (perm == null) return Results.NotFound("Permission not found");
    var page = new MainApi.Models.PageAccess { Path = path, PermissionId = perm.Id };
    db.PageAccesses.Add(page);
    await db.SaveChangesAsync();
    return Results.Created($"/api/pages/{page.Id}", page);
});

app.MapPut("/api/pages/{id}", async (MainDbContext db, int id, string permissionCode) =>
{
    var page = await db.PageAccesses.FindAsync(id);
    if (page == null) return Results.NotFound();
    var perm = await db.Permissions.FirstOrDefaultAsync(p => p.Code == permissionCode);
    if (perm == null) return Results.NotFound("Permission not found");
    page.PermissionId = perm.Id;
    await db.SaveChangesAsync();
    return Results.Ok(page);
});

app.MapDelete("/api/pages/{id}", async (MainDbContext db, int id) =>
{
    var page = await db.PageAccesses.FindAsync(id);
    if (page == null) return Results.NotFound();
    db.PageAccesses.Remove(page);
    await db.SaveChangesAsync();
    return Results.NoContent();
});

// --- API Token Management ---
app.MapGet("/api/tokens", async (MainDbContext db, int userId, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("api_token")) return Results.Forbid();
    var tokens = await db.ApiTokens.Include(t => t.Permissions).Where(t => t.UserId == userId).ToListAsync();
    await AppHelpers.LogAuditAsync(db, userId, null, "token_view", $"count={tokens.Count}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Ok(tokens.Select(t => new {
        t.Id,
        t.Name,
        t.CreatedAt,
        t.ExpiresAt,
        Permissions = t.Permissions.Select(tp => tp.PermissionId).ToList()
    }));
});

app.MapPost("/api/tokens", async (MainDbContext db, int userId, string name, DateTime? expiresAt, List<int> permissionIds, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("api_token")) return Results.Forbid();
    var rawToken = Convert.ToBase64String(RandomNumberGenerator.GetBytes(32));
    var hash = PasswordHasher.HashPassword(rawToken, userId.ToString());
    // Получаем разрешения пользователя по id
    var allowedPermIds = await db.Permissions.Where(p => perms.Contains(p.Code)).Select(p => p.Id).ToListAsync();
    var filteredPermIds = permissionIds.Where(id => allowedPermIds.Contains(id)).Distinct().ToList();
    var token = new MainApi.Models.ApiToken
    {
        UserId = userId,
        Token = hash,
        Name = name,
        CreatedAt = DateTime.UtcNow,
        ExpiresAt = expiresAt,
        Permissions = filteredPermIds.Select(pid => new MainApi.Models.TokenPermission { PermissionId = pid }).ToList()
    };
    db.ApiTokens.Add(token);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, userId, token.Id, "token_create", $"name={name};perms=[{string.Join(",", filteredPermIds)}]", http.Connection.RemoteIpAddress?.ToString());
    return Results.Ok(new { token.Id, token.Name, token.CreatedAt, token.ExpiresAt, Token = rawToken, Permissions = filteredPermIds });
});

app.MapDelete("/api/tokens/{id}", async (MainDbContext db, int userId, int id, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("api_token")) return Results.Forbid();
    var token = await db.ApiTokens.FirstOrDefaultAsync(t => t.Id == id && t.UserId == userId);
    if (token == null) return Results.NotFound();
    db.ApiTokens.Remove(token);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, userId, id, "token_delete", $"name={token.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.NoContent();
});

app.MapGet("/api/tokens/all", async (MainDbContext db, int userId, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("api_token_view_all")) return Results.Forbid();
    var tokens = await db.ApiTokens.Include(t => t.UserId).ToListAsync();
    var users = await db.Users.ToListAsync();
    await AppHelpers.LogAuditAsync(db, userId, null, "token_view_all", $"count={tokens.Count}", http.Connection.RemoteIpAddress?.ToString());
    return Results.Ok(tokens.Select(t => new {
        t.Id,
        t.Name,
        t.CreatedAt,
        t.ExpiresAt,
        t.UserId,
        UserLogin = users.FirstOrDefault(u => u.Id == t.UserId)?.Login
    }));
});

app.MapDelete("/api/tokens/all/{id}", async (MainDbContext db, int userId, int id, HttpContext http) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("api_token_delete_all")) return Results.Forbid();
    var token = await db.ApiTokens.FirstOrDefaultAsync(t => t.Id == id);
    if (token == null) return Results.NotFound();
    db.ApiTokens.Remove(token);
    await db.SaveChangesAsync();
    await AppHelpers.LogAuditAsync(db, userId, id, "token_delete_any", $"name={token.Name}", http.Connection.RemoteIpAddress?.ToString());
    return Results.NoContent();
});

// --- Audit Log API ---
app.MapGet("/api/audit-logs", async (MainDbContext db, int userId, string? action, int? filterUserId, int? apiTokenId, string? ip, string? details, DateTime? from, DateTime? to) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("audit_log_view")) return Results.Forbid();
    var query = db.AuditLogs.AsQueryable();
    if (!string.IsNullOrWhiteSpace(action)) query = query.Where(l => l.Action == action);
    if (filterUserId.HasValue) query = query.Where(l => l.UserId == filterUserId);
    if (apiTokenId.HasValue) query = query.Where(l => l.ApiTokenId == apiTokenId);
    if (!string.IsNullOrWhiteSpace(ip)) query = query.Where(l => l.Ip == ip);
    if (!string.IsNullOrWhiteSpace(details)) query = query.Where(l => l.Details != null && l.Details.Contains(details));
    if (from.HasValue) query = query.Where(l => l.CreatedAt >= from);
    if (to.HasValue) query = query.Where(l => l.CreatedAt <= to);
    var logs = await query.OrderByDescending(l => l.CreatedAt).Take(500).ToListAsync();
    return Results.Ok(logs);
});

app.MapDelete("/api/audit-logs", async (MainDbContext db, int userId, string? action, int? filterUserId, int? apiTokenId, string? ip, string? details, DateTime? to) =>
{
    var perms = await PermissionHelper.GetUserPermissions(db, userId);
    if (!perms.Contains("audit_log_manage")) return Results.Forbid();
    var query = db.AuditLogs.AsQueryable();
    if (!string.IsNullOrWhiteSpace(action)) query = query.Where(l => l.Action == action);
    if (filterUserId.HasValue) query = query.Where(l => l.UserId == filterUserId);
    if (apiTokenId.HasValue) query = query.Where(l => l.ApiTokenId == apiTokenId);
    if (!string.IsNullOrWhiteSpace(ip)) query = query.Where(l => l.Ip == ip);
    if (!string.IsNullOrWhiteSpace(details)) query = query.Where(l => l.Details != null && l.Details.Contains(details));
    if (to.HasValue) query = query.Where(l => l.CreatedAt <= to);
    db.AuditLogs.RemoveRange(query);
    await db.SaveChangesAsync();
    return Results.NoContent();
});

app.Run();

// DTOs and domain below for single-file simplicity. In a real project, split by folders.

record AuthRequest
{
    public string Login { get; init; } = string.Empty;
    public string Password { get; init; } = string.Empty;
}

record TwoFaStartRequest
{
    public string Login { get; init; } = string.Empty;
    public string? Issuer { get; init; }
}

record TwoFaVerifyRequest
{
    public string Login { get; init; } = string.Empty;
    public string? Code { get; init; }
}

class User
{
    public int Id { get; set; }
    public string Login { get; set; } = string.Empty;
    public string PasswordHash { get; set; } = string.Empty;
    public string PasswordSalt { get; set; } = string.Empty;
    public bool Require2FA { get; set; }
    public bool IsBanned { get; set; }
    public string? BanReason { get; set; }
    public Guid UserUuid { get; set; } = Guid.NewGuid();
    // 2FA fields
    public string? TwoFactorSecret { get; set; }
    public bool TwoFactorEnabled { get; set; }
    public bool MustSetup2FA { get; set; }
    public List<string> Permissions { get; set; } = new();
}

class NewsItem
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}

interface IUserRepository
{
    Task<User?> FindByLoginAsync(string login);
    Task UpdateAsync(User user);
}

interface INewsRepository
{
    Task<IReadOnlyList<NewsItem>> GetAsync(int limit, int offset);
}

class InMemoryUserRepository : IUserRepository
{
    private readonly List<User> _users = new();

    public InMemoryUserRepository()
    {
        // Seed: admin (no 2FA), tester (requires 2FA), banned user
        var adminLogin = Environment.GetEnvironmentVariable("ADMIN_LOGIN") ?? "admin";
        var adminPassword = Environment.GetEnvironmentVariable("ADMIN_PASSWORD") ?? "admin123";
        bool.TryParse(Environment.GetEnvironmentVariable("ADMIN_REQUIRE2FA"), out var adminRequire2FA);
        bool.TryParse(Environment.GetEnvironmentVariable("ADMIN_IS_BANNED"), out var adminIsBanned);
        var adminBanReason = Environment.GetEnvironmentVariable("ADMIN_BAN_REASON");

        var adminSalt = PasswordHasher.GenerateSalt();
        _users.Add(new User
        {
            Login = adminLogin,
            PasswordSalt = adminSalt,
            PasswordHash = PasswordHasher.HashPassword(adminPassword, adminSalt),
            Require2FA = false,
            TwoFactorEnabled = false,
            MustSetup2FA = true,
            IsBanned = adminIsBanned,
            BanReason = string.IsNullOrWhiteSpace(adminBanReason) ? null : adminBanReason
        });

        var testerSalt = PasswordHasher.GenerateSalt();
        _users.Add(new User
        {
            Login = "tester",
            PasswordSalt = testerSalt,
            PasswordHash = PasswordHasher.HashPassword("test123", testerSalt),
            Require2FA = true,
            IsBanned = false
        });

        var bannedSalt = PasswordHasher.GenerateSalt();
        _users.Add(new User
        {
            Login = "banned",
            PasswordSalt = bannedSalt,
            PasswordHash = PasswordHasher.HashPassword("banned123", bannedSalt),
            Require2FA = false,
            IsBanned = true,
            BanReason = "Раздача на спавне"
        });
    }

    public Task<User?> FindByLoginAsync(string login)
    {
        var user = _users.FirstOrDefault(u => string.Equals(u.Login, login, StringComparison.OrdinalIgnoreCase));
        return Task.FromResult(user);
    }

    public Task UpdateAsync(User user)
    {
        var existing = _users.FirstOrDefault(u => u.Id == user.Id || string.Equals(u.Login, user.Login, StringComparison.OrdinalIgnoreCase));
        if (existing != null)
        {
            existing.PasswordHash = user.PasswordHash;
            existing.PasswordSalt = user.PasswordSalt;
            existing.Require2FA = user.Require2FA;
            existing.IsBanned = user.IsBanned;
            existing.BanReason = user.BanReason;
            existing.UserUuid = user.UserUuid;
            existing.TwoFactorSecret = user.TwoFactorSecret;
            existing.TwoFactorEnabled = user.TwoFactorEnabled;
            existing.MustSetup2FA = user.MustSetup2FA;
        }
        return Task.CompletedTask;
    }
}

class InMemoryNewsRepository : INewsRepository
{
    private readonly List<NewsItem> _items = new();

    public InMemoryNewsRepository()
    {
        _items.Add(new NewsItem { Id = 1, Title = "Заголовок новости", Description = "Содержание новости", CreatedAt = DateTime.UtcNow.AddDays(-2) });
        _items.Add(new NewsItem { Id = 2, Title = "Другая новость", Description = "Текст другой новости", CreatedAt = DateTime.UtcNow.AddDays(-1) });
        _items.Add(new NewsItem { Id = 3, Title = "Третья новость", Description = "Немного текста", CreatedAt = DateTime.UtcNow });
    }

    public Task<IReadOnlyList<NewsItem>> GetAsync(int limit, int offset)
    {
        if (limit < 0) limit = 0;
        if (offset < 0) offset = 0;
        var slice = _items
            .OrderByDescending(n => n.CreatedAt)
            .Skip(offset)
            .Take(limit)
            .ToList();
        return Task.FromResult((IReadOnlyList<NewsItem>)slice);
    }
}

static class PasswordHasher
{
    public static string GenerateSalt()
    {
        var bytes = RandomNumberGenerator.GetBytes(16);
        return Convert.ToBase64String(bytes);
    }

    public static string HashPassword(string password, string salt)
    {
        using var sha256 = SHA256.Create();
        var combined = Encoding.UTF8.GetBytes(password + ":" + salt);
        var hash = sha256.ComputeHash(combined);
        return Convert.ToBase64String(hash);
    }

    public static bool VerifyPassword(string password, string hash, string salt)
    {
        var computed = HashPassword(password, salt);
        return CryptographicOperations.FixedTimeEquals(
            Convert.FromBase64String(hash), Convert.FromBase64String(computed));
    }
}



// --- EF Core DbContext ---
class MainDbContext : DbContext
{
    public MainDbContext(DbContextOptions<MainDbContext> options) : base(options) { }

    public DbSet<User> Users => Set<User>();
    public DbSet<NewsItem> News => Set<NewsItem>();
    public DbSet<MainApi.Models.Role> Roles => Set<MainApi.Models.Role>();
    public DbSet<MainApi.Models.Permission> Permissions => Set<MainApi.Models.Permission>();
    public DbSet<MainApi.Models.RolePermission> RolePermissions => Set<MainApi.Models.RolePermission>();
    public DbSet<MainApi.Models.UserRole> UserRoles => Set<MainApi.Models.UserRole>();
    public DbSet<MainApi.Models.UserPermission> UserPermissions => Set<MainApi.Models.UserPermission>();
    public DbSet<MainApi.Models.Ticket> Tickets => Set<MainApi.Models.Ticket>();
    public DbSet<MainApi.Models.PageAccess> PageAccesses => Set<MainApi.Models.PageAccess>();
    public DbSet<MainApi.Models.ApiToken> ApiTokens => Set<MainApi.Models.ApiToken>();
    public DbSet<MainApi.Models.AuditLog> AuditLogs => Set<MainApi.Models.AuditLog>();
    public DbSet<MainApi.Models.TokenPermission> TokenPermissions => Set<MainApi.Models.TokenPermission>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        var user = modelBuilder.Entity<User>();
        user.ToTable("users");
        user.HasKey(u => u.Id);
        user.HasIndex(u => u.Login).IsUnique();
        user.Property(u => u.Login).HasMaxLength(64).IsRequired();
        user.Property(u => u.PasswordHash).HasMaxLength(200).IsRequired();
        user.Property(u => u.PasswordSalt).HasMaxLength(200).IsRequired();
        user.Property(u => u.Require2FA).IsRequired();
        user.Property(u => u.IsBanned).IsRequired();
        user.Property(u => u.BanReason).HasMaxLength(512);
        user.Property(u => u.UserUuid).IsRequired();
        user.Property(u => u.TwoFactorSecret).HasMaxLength(200);
        user.Property(u => u.TwoFactorEnabled).IsRequired();
        user.Property(u => u.MustSetup2FA).IsRequired();

        var news = modelBuilder.Entity<NewsItem>();
        news.ToTable("news");
        news.HasKey(n => n.Id);
        news.Property(n => n.Title).HasMaxLength(200).IsRequired();
        news.Property(n => n.Description).HasMaxLength(4000).IsRequired();
        news.Property(n => n.CreatedAt).IsRequired();

        // Role
        var role = modelBuilder.Entity<MainApi.Models.Role>();
        role.ToTable("roles");
        role.HasKey(r => r.Id);
        role.HasIndex(r => r.Code).IsUnique();
        role.Property(r => r.Name).HasMaxLength(64).IsRequired();
        role.Property(r => r.Code).HasMaxLength(64).IsRequired();
        role.Property(r => r.Color).HasMaxLength(16);
        role.Property(r => r.LogoUrl).HasMaxLength(256);
        role.HasOne(r => r.ParentRole).WithMany().HasForeignKey(r => r.ParentRoleId).OnDelete(DeleteBehavior.Restrict);

        // Permission
        var perm = modelBuilder.Entity<MainApi.Models.Permission>();
        perm.ToTable("permissions");
        perm.HasKey(p => p.Id);
        perm.HasIndex(p => p.Code).IsUnique();
        perm.Property(p => p.Name).HasMaxLength(128).IsRequired();
        perm.Property(p => p.Code).HasMaxLength(128).IsRequired();
        perm.Property(p => p.Description).HasMaxLength(512);

        // RolePermission
        var rp = modelBuilder.Entity<MainApi.Models.RolePermission>();
        rp.ToTable("role_permissions");
        rp.HasKey(x => new { x.RoleId, x.PermissionId });
        rp.HasOne(x => x.Role).WithMany(r => r.RolePermissions).HasForeignKey(x => x.RoleId);
        rp.HasOne(x => x.Permission).WithMany(p => p.RolePermissions).HasForeignKey(x => x.PermissionId);

        // UserRole
        var ur = modelBuilder.Entity<MainApi.Models.UserRole>();
        ur.ToTable("user_roles");
        ur.HasKey(x => new { x.UserId, x.RoleId });
        ur.HasOne(x => x.Role).WithMany(r => r.UserRoles).HasForeignKey(x => x.RoleId);

        // UserPermission
        var up = modelBuilder.Entity<MainApi.Models.UserPermission>();
        up.ToTable("user_permissions");
        up.HasKey(x => new { x.UserId, x.PermissionId });
        up.HasOne(x => x.Permission).WithMany(p => p.UserPermissions).HasForeignKey(x => x.PermissionId);

        // Ticket
        var ticket = modelBuilder.Entity<MainApi.Models.Ticket>();
        ticket.ToTable("tickets");
        ticket.HasKey(t => t.Id);
        ticket.Property(t => t.Title).HasMaxLength(200).IsRequired();
        ticket.Property(t => t.Description).HasMaxLength(4000);
        ticket.Property(t => t.Status).HasMaxLength(32).IsRequired();
        ticket.Property(t => t.CreatedAt).IsRequired();

        // PageAccess
        var page = modelBuilder.Entity<MainApi.Models.PageAccess>();
        page.ToTable("page_access");
        page.HasKey(p => p.Id);
        page.Property(p => p.Path).HasMaxLength(128).IsRequired();
        page.HasOne(p => p.Permission).WithMany().HasForeignKey(p => p.PermissionId).OnDelete(DeleteBehavior.Cascade);

        // ApiToken
        var token = modelBuilder.Entity<MainApi.Models.ApiToken>();
        token.ToTable("api_tokens");
        token.HasKey(t => t.Id);
        token.Property(t => t.Token).HasMaxLength(128).IsRequired();
        token.Property(t => t.Name).HasMaxLength(64);
        token.Property(t => t.CreatedAt).IsRequired();

        // AuditLog
        var log = modelBuilder.Entity<MainApi.Models.AuditLog>();
        log.ToTable("audit_logs");
        log.HasKey(l => l.Id);
        log.Property(l => l.Action).HasMaxLength(128).IsRequired();
        log.Property(l => l.Details).HasMaxLength(2048);
        log.Property(l => l.TokenName).HasMaxLength(64);
        log.Property(l => l.IpAddress).HasMaxLength(64);
        log.Property(l => l.Timestamp).IsRequired();

        // TokenPermission
        var tp = modelBuilder.Entity<MainApi.Models.TokenPermission>();
        tp.ToTable("token_permissions");
        tp.HasKey(x => new { x.TokenId, x.PermissionId });
        tp.HasOne(x => x.Token).WithMany(t => t.Permissions).HasForeignKey(x => x.TokenId);
        tp.HasOne(x => x.Permission).WithMany().HasForeignKey(x => x.PermissionId);
    }
}

// --- EF Core Repositories ---
class EfUserRepository : IUserRepository
{
    private readonly MainDbContext _db;
    public EfUserRepository(MainDbContext db) => _db = db;

    public Task<User?> FindByLoginAsync(string login)
    {
        return _db.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Login.ToLower() == login.ToLower());
    }

    public async Task UpdateAsync(User user)
    {
        _db.Users.Update(user);
        await _db.SaveChangesAsync();
    }
}

class EfNewsRepository : INewsRepository
{
    private readonly MainDbContext _db;
    public EfNewsRepository(MainDbContext db) => _db = db;

    public async Task<IReadOnlyList<NewsItem>> GetAsync(int limit, int offset)
    {
        if (limit < 0) limit = 0;
        if (offset < 0) offset = 0;
        var slice = await _db.News
            .AsNoTracking()
            .OrderByDescending(n => n.CreatedAt)
            .Skip(offset)
            .Take(limit)
            .ToListAsync();
        return slice;
    }
}

static class PermissionHelper
{
    public static async Task<HashSet<string>> GetUserPermissions(MainDbContext db, int userId)
    {
        var userPerms = await db.UserPermissions.Where(up => up.UserId == userId).Select(up => up.Permission.Code).ToListAsync();
        var roleIds = await db.UserRoles.Where(ur => ur.UserId == userId).Select(ur => ur.RoleId).ToListAsync();
        var allPerms = new HashSet<string>(userPerms);
        var visitedRoles = new HashSet<int>();
        foreach (var roleId in roleIds)
            AddRolePermissionsRecursive(db, roleId, allPerms, visitedRoles);
        // Если есть '*' — все разрешения
        if (allPerms.Contains("*"))
            allPerms = db.Permissions.Select(p => p.Code).ToHashSet();
        return allPerms;
    }

    public static void AddRolePermissionsRecursive(MainDbContext db, int roleId, HashSet<string> perms, HashSet<int> visited)
    {
        if (visited.Contains(roleId)) return;
        visited.Add(roleId);
        var role = db.Roles.Include(r => r.RolePermissions).FirstOrDefault(r => r.Id == roleId);
        if (role == null) return;
        var codes = role.RolePermissions.Select(rp => rp.Permission.Code);
        foreach (var c in codes) perms.Add(c);
        if (role.ParentRoleId.HasValue)
            AddRolePermissionsRecursive(db, role.ParentRoleId.Value, perms, visited);
    }
}


// ФАЙЛ: C:\Users\122aa\RiderProjects\ExiledProjectCMS\README.md
# ExiledProjectCMS вЂ” РћСЃРЅРѕРІРЅРѕР№ API РґР»СЏ Minecraft CMS

[![.NET](https://img.shields.io/badge/.NET-8.0-512BD4?logo=dotnet&logoColor=white)](https://dotnet.microsoft.com/)
[![ASP.NET Core](https://img.shields.io/badge/ASP.NET%20Core-Minimal%20API-512BD4)](https://learn.microsoft.com/aspnet/core)
[![MySQL](https://img.shields.io/badge/DB-MySQL-4479A1?logo=mysql&logoColor=white)](https://www.mysql.com/)
[![PostgreSQL](https://img.shields.io/badge/DB-PostgreSQL-4169E1?logo=postgresql&logoColor=white)](https://www.postgresql.org/)
[![Docker Compose](https://img.shields.io/badge/Docker-Compose-2496ED?logo=docker&logoColor=white)](https://docs.docker.com/compose/)
[![Prometheus](https://img.shields.io/badge/Monitoring-Prometheus-E6522C?logo=prometheus&logoColor=white)](https://prometheus.io/)
[![Grafana](https://img.shields.io/badge/Monitoring-Grafana-F46800?logo=grafana&logoColor=white)](https://grafana.com/)
![Status](https://img.shields.io/badge/Status-WIP-yellow)

РћСЃРЅРѕРІРЅРѕР№ API РЅР° C# РґР»СЏ Р±СѓРґСѓС‰РµР№ CMS Minecraft СЃ РёРЅС‚РµРіСЂР°С†РёРµР№ GML Launcher.

Р”РѕРєСѓРјРµРЅС‚Р°С†РёСЏ GML: https://gml-launcher.github.io/Gml.Docs/home.html

---

## РЎРѕРґРµСЂР¶Р°РЅРёРµ
- Р’РІРµРґРµРЅРёРµ
- РЎРѕСЃС‚Р°РІ СЂРµРїРѕР·РёС‚РѕСЂРёСЏ
- Р’РѕР·РјРѕР¶РЅРѕСЃС‚Рё
- Р”РѕСЂРѕР¶РЅР°СЏ РєР°СЂС‚Р°
- РўСЂРµР±РѕРІР°РЅРёСЏ
- Р‘С‹СЃС‚СЂС‹Р№ СЃС‚Р°СЂС‚
    - Р’Р°СЂРёР°РЅС‚ A вЂ” Р±РµР· Р‘Р” (in-memory)
    - Р’Р°СЂРёР°РЅС‚ B вЂ” Р»РѕРєР°Р»СЊРЅРѕ СЃ MySQL/PostgreSQL
    - Р’Р°СЂРёР°РЅС‚ C вЂ” Docker Compose (API + Р‘Р” + Prometheus + Grafana)
- РљРѕРЅС„РёРіСѓСЂР°С†РёСЏ (.env)
- РЎРёРґвЂ‘РґР°РЅРЅС‹Рµ
- Р­РЅРґРїРѕРёРЅС‚С‹
- РњРѕРЅРёС‚РѕСЂРёРЅРі
- РџСЂРѕРІРµСЂРєР° СЃРєСЂРёРїС‚Р°РјРё
- FAQ
- Р›РёС†РµРЅР·РёСЏ

---

## Р’РІРµРґРµРЅРёРµ
ExiledProjectCMS вЂ” РјРёРЅРёРјР°Р»СЊРЅРѕ Р¶РёР·РЅРµСЃРїРѕСЃРѕР±РЅС‹Р№ Р±СЌРєРµРЅРґ, РєРѕС‚РѕСЂС‹Р№ СѓР¶Рµ СѓРјРµРµС‚:
- Р°РІС‚РѕСЂРёР·РѕРІС‹РІР°С‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ РІ С„РѕСЂРјР°С‚Рµ, РѕР¶РёРґР°РµРјРѕРј GML Launcher;
- РѕС‚РґР°РІР°С‚СЊ Р»РµРЅС‚Сѓ РЅРѕРІРѕСЃС‚РµР№ РґР»СЏ РёРјРїРѕСЂС‚Р° РІ Р»Р°СѓРЅС‡РµСЂ;
- СЂР°Р±РѕС‚Р°С‚СЊ РєР°Рє СЃ СЂРµР°Р»СЊРЅРѕР№ Р‘Р” (MySQL/PostgreSQL С‡РµСЂРµР· EF Core), С‚Р°Рє Рё РІ inвЂ‘memory СЂРµР¶РёРјРµ;
- РѕС‚РґР°РІР°С‚СЊ РјРµС‚СЂРёРєРё Prometheus Рё СЃРјРѕС‚СЂРµС‚СЊ РёС… РІ Grafana;
- Р·Р°РїСѓСЃРєР°С‚СЊСЃСЏ Р»РѕРєР°Р»СЊРЅРѕ Рё С‡РµСЂРµР· Docker Compose.

РњРёРЅРёвЂ‘СЃС…РµРјР° СЃС‚РµРєР°:
```
[ GML Launcher ] в†’ [ Main API (.NET 8) ] в†” [ MySQL | PostgreSQL ]
                                 в†
                                  в†’ [/metrics в†’ Prometheus] в†’ [Grafana]
```

## РЎРѕСЃС‚Р°РІ СЂРµРїРѕР·РёС‚РѕСЂРёСЏ
- src\MainApi вЂ” ASP.NET Core 8 Minimal API
- monitoring\prometheus вЂ” РєРѕРЅС„РёРіСѓСЂР°С†РёСЏ Prometheus
- monitoring\grafana\provisioning вЂ” Р°РІС‚РѕвЂ‘РїРѕРґРєР»СЋС‡РµРЅРёРµ РёСЃС‚РѕС‡РЅРёРєР° РґР°РЅРЅС‹С… Prometheus РІ Grafana
- tests\check_api.ps1 вЂ” PowerShellвЂ‘СЃРєСЂРёРїС‚ РґР»СЏ РїСЂРѕРІРµСЂРєРё API
- tests\check_api.sh вЂ” BashвЂ‘СЃРєСЂРёРїС‚ РґР»СЏ РїСЂРѕРІРµСЂРєРё API
- docker-compose.yml вЂ” РѕР±С‰РёР№ СЃС‚РµРє (API + Р‘Р” + Prometheus + Grafana)
- .env.example вЂ” РїСЂРёРјРµСЂ РєРѕРЅС„РёРіСѓСЂР°С†РёРё РѕРєСЂСѓР¶РµРЅРёСЏ

## Р’РѕР·РјРѕР¶РЅРѕСЃС‚Рё
- ASP.NET Core 8 Minimal API.
- РРЅС‚РµРіСЂР°С†РёСЏ РґР»СЏ GML:
    - POST /api/v1/integrations/auth/signin вЂ” РєР°СЃС‚РѕРјРЅС‹Р№ РІС…РѕРґ (СЃРј. Р­РЅРґРїРѕРёРЅС‚С‹).
    - GET /api/news вЂ” СЃРїРёСЃРѕРє РЅРѕРІРѕСЃС‚РµР№ (limit, offset).
- Р—РґРѕСЂРѕРІСЊРµ СЃРµСЂРІРёСЃР°: GET /health.
- РњРµС‚СЂРёРєРё Prometheus: /metrics (prometheus-net.AspNetCore).
- Р‘Р°Р·Р° РґР°РЅРЅС‹С… (EF Core): MySQL (Pomelo) Рё PostgreSQL (Npgsql).
    - РљРѕРЅС„РёРіСѓСЂР°С†РёСЏ С‡РµСЂРµР· .env, Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРѕРµ СЃРѕР·РґР°РЅРёРµ Р‘Р” Рё СЃРёРґС‹ С‡РµСЂРµР· EnsureCreated (РјРёРіСЂР°С†РёР№ РїРѕРєР° РЅРµС‚).
    - Р•СЃР»Рё Р‘Р” РЅРµ СЃРєРѕРЅС„РёРіСѓСЂРёСЂРѕРІР°РЅР° вЂ” РїСЂРѕР·СЂР°С‡РЅС‹Р№ fallback РЅР° in-memory СЂРµРїРѕР·РёС‚РѕСЂРёРё СЃ С‚РµРјРё Р¶Рµ СЃРёРґвЂ‘РґР°РЅРЅС‹РјРё.
- Docker Compose СЃС‚РµРє: Main API + MySQL/PostgreSQL (РїРѕ РїСЂРѕС„РёР»СЏРј) + Prometheus + Grafana.
    - Grafana Р±РµСЂС‘С‚ Р»РѕРіРёРЅ/РїР°СЂРѕР»СЊ РёР· .env Рё Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё РїРѕР»СѓС‡Р°РµС‚ datasource Prometheus.
    - Prometheus РјРѕР¶РЅРѕ Р·Р°С‰РёС‚РёС‚СЊ Р±Р°Р·РѕРІРѕР№ Р°РІС‚РѕСЂРёР·Р°С†РёРµР№ (СЃРј. .env).
- РўРµСЃС‚РѕРІС‹Рµ СЃРєСЂРёРїС‚С‹ (PowerShell Рё Bash) РґР»СЏ РїСЂРѕРІРµСЂРєРё РѕСЃРЅРѕРІРЅС‹С… СЃС†РµРЅР°СЂРёРµРІ.

## Р”РѕСЂРѕР¶РЅР°СЏ РєР°СЂС‚Р°
- РџРѕР»РЅРѕС†РµРЅРЅР°СЏ 2FA: РїСЂРёС‘Рј Рё РїСЂРѕРІРµСЂРєР° TOTPвЂ‘РєРѕРґР° (СЃРµР№С‡Р°СЃ С‚РѕР»СЊРєРѕ РїРѕРґСЃРєР°Р·РєР° РІ 401).
- РўРѕРєРµРЅС‹ (JWT/refresh), Р·Р°С‰РёС‰С‘РЅРЅС‹Рµ СЌРЅРґРїРѕРёРЅС‚С‹ Рё РїСЂР°РІР° РґРѕСЃС‚СѓРїР°.
- Р РѕР»Рё, РїСЂР°РІР° Рё Р°РґРјРёРЅвЂ‘РїР°РЅРµР»СЊ (RBAC, РґРѕСЃС‚СѓРї Рє СЃС‚СЂР°РЅРёС†Р°Рј/СЌР»РµРјРµРЅС‚Р°Рј/С„РѕСЂРјР°Рј).
- РџРѕС‡С‚РѕРІС‹Р№ СЃРµСЂРІРёСЃ (Go) Рё РµРіРѕ РЅР°СЃС‚СЂРѕР№РєР° РёР· Р°РґРјРёРЅвЂ‘РїР°РЅРµР»Рё.
- РџР»Р°С‚С‘Р¶РЅС‹Р№ СЃРµСЂРІРёСЃ (Go) Рё РёРЅС‚РµРіСЂР°С†РёРё СЃ РїСЂРѕРІР°Р№РґРµСЂР°РјРё.
- РљРµС€РёСЂРѕРІР°РЅРёРµ (Redis) Рё РµРіРѕ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµ РЅР° СЃС‚РѕСЂРѕРЅРµ API.
- РЎРµСЂРІРёСЃ СЃРєРёРЅРѕРІ (Go) Рё РёРЅС‚РµРіСЂР°С†РёСЏ РїРѕ РґРѕРєСѓРјРµРЅС‚Р°С†РёРё GML.
- РРЅС‚РµРіСЂР°С†РёРё РЅРѕРІРѕСЃС‚РµР№ СЃ Р»Р°СѓРЅС‡РµСЂРѕРј Рё РІ Discord (РІРµР±С…СѓРєРё/Р±РѕС‚).
- EF Core РјРёРіСЂР°С†РёРё (СЃРµР№С‡Р°СЃ EnsureCreated).
- Р”РѕРїРѕР»РЅРёС‚РµР»СЊРЅС‹Р№ РјРѕРЅРёС‚РѕСЂРёРЅРі, РіРѕС‚РѕРІС‹Рµ РґР°С€Р±РѕСЂРґС‹ Grafana, Р°Р»РµСЂС‚С‹.
- CI/CD, РєРѕРЅС‚РµР№РЅРµСЂРёР·Р°С†РёСЏ Рё Р·Р°РїСѓСЃРє СЃРѕРїСѓС‚СЃС‚РІСѓСЋС‰РёС… СЃРµСЂРІРёСЃРѕРІ (Go) РІ РѕР±С‰РµРј СЃС‚РµРєРµ.
- РЈР»СѓС‡С€РµРЅРёСЏ Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё: rate limiting, Р°СѓРґРёС‚ Р»РѕРіРѕРІ, CSP Рё С‚.Рї.

## РўСЂРµР±РѕРІР°РЅРёСЏ
- .NET 8 SDK вЂ” https://dotnet.microsoft.com/download
- Docker + Docker Compose plugin (РґР»СЏ РІР°СЂРёР°РЅС‚Р° СЃ РєРѕРЅС‚РµР№РЅРµСЂР°РјРё)
- MySQL 8+ РёР»Рё PostgreSQL 13+ (РµСЃР»Рё Р±РµР· Docker Compose Рё СЃ СЂРµР°Р»СЊРЅРѕР№ Р‘Р”)

## Р‘С‹СЃС‚СЂС‹Р№ СЃС‚Р°СЂС‚
### Р’Р°СЂРёР°РЅС‚ A вЂ” Р±РµР· Р‘Р” (inвЂ‘memory)
1) РЎРєРѕРїРёСЂСѓР№С‚Рµ .env.example РІ .env
- Windows (PowerShell):
```powershell
Copy-Item .env.example .env
```
- Linux/macOS:
```bash
cp .env.example .env
```
2) (РќРµРѕР±СЏР·Р°С‚РµР»СЊРЅРѕ) РћС‚СЂРµРґР°РєС‚РёСЂСѓР№С‚Рµ ADMIN_LOGIN/ADMIN_PASSWORD РґР»СЏ РїРµСЂРІРѕРЅР°С‡Р°Р»СЊРЅРѕРіРѕ Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂР°.
3) Р—Р°РїСѓСЃС‚РёС‚Рµ API РЅР° С„РёРєСЃРёСЂРѕРІР°РЅРЅРѕРј РїРѕСЂС‚Сѓ (СЃРѕРІРјРµСЃС‚РёРјРѕ СЃ С‚РµСЃС‚вЂ‘СЃРєСЂРёРїС‚Р°РјРё):
```powershell
dotnet run --project src\MainApi\MainApi.csproj --urls http://localhost:5190
```
4) РџСЂРѕРІРµСЂСЊС‚Рµ: http://localhost:5190/health
5) Р—Р°РїСѓСЃС‚РёС‚Рµ С‚РµСЃС‚С‹ (РїРѕ Р¶РµР»Р°РЅРёСЋ):
```powershell
./tests/check_api.ps1 -BaseUrl http://localhost:5190
```
РёР»Рё
```bash
./tests/check_api.sh http://localhost:5190
```

### Р’Р°СЂРёР°РЅС‚ B вЂ” Р»РѕРєР°Р»СЊРЅРѕ СЃ MySQL/PostgreSQL (Р±РµР· Docker Compose)
1) РџРѕРґРЅРёРјРёС‚Рµ СЃРІРѕСЋ Р‘Р” Рё СЃРѕР·РґР°Р№С‚Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ СЃ РїСЂР°РІР°РјРё РЅР° СЃРѕР·РґР°РЅРёРµ Р‘Р”/С‚Р°Р±Р»РёС†.
2) РЎРєРѕРїРёСЂСѓР№С‚Рµ .env.example РІ .env Рё Р·Р°РїРѕР»РЅРёС‚Рµ РЅР°СЃС‚СЂРѕР№РєРё Р‘Р”, РЅР°РїСЂРёРјРµСЂ РґР»СЏ MySQL:
```env
DB_PROVIDER=mysql
DB_HOST=localhost
DB_PORT=3306
DB_NAME=exiledcms
DB_USER=root
DB_PASSWORD=yourpassword
```
Р”Р»СЏ PostgreSQL РёСЃРїРѕР»СЊР·СѓР№С‚Рµ DB_PROVIDER=postgresql Рё СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёРµ Р·РЅР°С‡РµРЅРёСЏ; РїСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё СѓРєР°Р¶РёС‚Рµ DB_SSLMODE.
3) Р—Р°РїСѓСЃС‚РёС‚Рµ API (Р»СѓС‡С€Рµ СѓРєР°Р·Р°С‚СЊ URL):
```powershell
dotnet run --project src\MainApi\MainApi.csproj --urls http://localhost:5190
```
4) РќР° СЃС‚Р°СЂС‚Рµ Р‘Р” Р±СѓРґРµС‚ СЃРѕР·РґР°РЅР° (EnsureCreated) Рё РїСЂРё РїСѓСЃС‚С‹С… С‚Р°Р±Р»РёС†Р°С… РґРѕР±Р°РІСЏС‚СЃСЏ СЃРёРґвЂ‘РґР°РЅРЅС‹Рµ.

### Р’Р°СЂРёР°РЅС‚ C вЂ” Docker Compose (API + Р‘Р” + Prometheus + Grafana)
1) РЎРєРѕРїРёСЂСѓР№С‚Рµ .env.example РІ .env Рё РѕС‚СЂРµРґР°РєС‚РёСЂСѓР№С‚Рµ:
- Р’С‹Р±РµСЂРёС‚Рµ РїСЂРѕРІР°Р№РґРµСЂР° Рё С…РѕСЃС‚ Р‘Р” РІРЅСѓС‚СЂРё Compose:
    - MySQL: DB_PROVIDER=mysql, DB_HOST=mysql
    - PostgreSQL: DB_PROVIDER=postgresql, DB_HOST=postgres
- РџРѕСЂС‚С‹ (РїСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё): API_PORT, PROMETHEUS_PORT, GRAFANA_PORT
- Р”Р°РЅРЅС‹Рµ Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂР° Grafana: GRAFANA_ADMIN_USER, GRAFANA_ADMIN_PASSWORD
- (РћРїС†РёРѕРЅР°Р»СЊРЅРѕ) Р±Р°Р·РѕРІР°СЏ Р°РІС‚РѕСЂРёР·Р°С†РёСЏ UI Prometheus: PROMETHEUS_WEB_USER Рё PROMETHEUS_WEB_PASSWORD_BCRYPT (bcryptвЂ‘С…РµС€)
- (РћРїС†РёРѕРЅР°Р»СЊРЅРѕ) РІРєР»СЋС‡РёС‚СЊ Swagger UI РІ РєРѕРЅС‚РµР№РЅРµСЂРµ: ASPNETCORE_ENVIRONMENT=Development
2) РџРѕРґРЅРёРјРёС‚Рµ СЃС‚РµРє, РІС‹Р±СЂР°РІ РїСЂРѕС„РёР»СЊ Р‘Р”:
```bash
docker compose --profile mysql up -d
# РёР»Рё
docker compose --profile postgresql up -d
```
3) РџСЂРѕРІРµСЂСЊС‚Рµ РґРѕСЃС‚СѓРїРЅРѕСЃС‚СЊ:
- API:        http://localhost:${API_PORT:-5190}/health
- РњРµС‚СЂРёРєРё:    http://localhost:${API_PORT:-5190}/metrics
- Prometheus: http://localhost:${PROMETHEUS_PORT:-9090}
- Grafana:    http://localhost:${GRAFANA_PORT:-3000}
4) Р—Р°РїСѓСЃС‚РёС‚Рµ С‚РµСЃС‚С‹ РїСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё:
```powershell
./tests/check_api.ps1 -BaseUrl http://localhost:${API_PORT:-5190}
```
РёР»Рё
```bash
./tests/check_api.sh http://localhost:${API_PORT:-5190}
```

## РљРѕРЅС„РёРіСѓСЂР°С†РёСЏ (.env)
РњРёРЅРёРјР°Р»СЊРЅС‹Рµ РїСЂРёРјРµСЂС‹

вЂ” MySQL:
```env
DB_PROVIDER=mysql
DB_HOST=localhost
DB_PORT=3306
DB_NAME=exiledcms
DB_USER=root
DB_PASSWORD=yourpassword
```

вЂ” PostgreSQL:
```env
DB_PROVIDER=postgresql
DB_HOST=localhost
DB_PORT=5432
DB_NAME=exiledcms
DB_USER=postgres
DB_PASSWORD=yourpassword
# (РћРїС†РёРѕРЅР°Р»СЊРЅРѕ) DB_SSLMODE=Disable|Require|VerifyCA|VerifyFull (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ Disable)
```

Р”РѕРї. РїРµСЂРµРјРµРЅРЅС‹Рµ
- ADMIN_LOGIN, ADMIN_PASSWORD, ADMIN_REQUIRE2FA, ADMIN_IS_BANNED, ADMIN_BAN_REASON вЂ” РїР°СЂР°РјРµС‚СЂС‹ СЃРёРґвЂ‘Р°РґРјРёРЅР°.
  Р’Р°Р¶РЅРѕ: СЃРёРґвЂ‘РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РґРѕР±Р°РІР»СЏРµС‚СЃСЏ С‚РѕР»СЊРєРѕ РµСЃР»Рё С‚Р°Р±Р»РёС†Р° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ РїСѓСЃС‚Р° (РёР»Рё РІ inвЂ‘memory СЂРµР¶РёРјРµ РїСЂРё СЃС‚Р°СЂС‚Рµ).
- API_PORT, PROMETHEUS_PORT, GRAFANA_PORT вЂ” РїСЂРѕР±СЂРѕСЃ РїРѕСЂС‚РѕРІ РІ Docker Compose.
- GRAFANA_ADMIN_USER, GRAFANA_ADMIN_PASSWORD вЂ” РєСЂРµРґС‹ Grafana.
- PROMETHEUS_WEB_USER, PROMР•РўHEРЈРЎ_WEB_PASSWORD_BCRYPT вЂ” РІРєР»СЋС‡Р°РµС‚ Р±Р°Р·РѕРІСѓСЋ Р°РІС‚РѕСЂРёР·Р°С†РёСЋ UI Prometheus (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ).
- MYSQL_ROOT_PASSWORD вЂ” РїР°СЂРѕР»СЊ root РґР»СЏ РєРѕРЅС‚РµР№РЅРµСЂР° MySQL (Compose, РїСЂРѕС„РёР»СЊ mysql).
- ASPNETCORE_ENVIRONMENT=Development вЂ” РІРєР»СЋС‡Р°РµС‚ Swagger UI (Р»РѕРєР°Р»СЊРЅРѕ РёР»Рё РІ РєРѕРЅС‚РµР№РЅРµСЂРµ, РµСЃР»Рё РїСЂРѕРєРёРЅСѓС‚СЊ РІ СЃРµСЂРІРёСЃ).

## РЎРёРґвЂ‘РґР°РЅРЅС‹Рµ
РџРѕР»СЊР·РѕРІР°С‚РµР»Рё:
- admin / admin123 вЂ” СѓСЃРїРµС€РЅР°СЏ Р°РІС‚РѕСЂРёР·Р°С†РёСЏ (РµСЃР»Рё РЅРµ РјРµРЅСЏР»Рё РІ .env)
- tester / test123 вЂ” С‚СЂРµР±СѓРµС‚СЃСЏ 2FA (РІРµСЂРЅС‘С‚СЃСЏ 401 СЃ РїРѕРґСЃРєР°Р·РєРѕР№)
- banned / banned123 вЂ” Р·Р°Р±Р»РѕРєРёСЂРѕРІР°РЅ (403 СЃ РїСЂРёС‡РёРЅРѕР№)

РќРѕРІРѕСЃС‚Рё: 3 РґРµРјРѕвЂ‘Р·Р°РїРёСЃРё.

## Р­РЅРґРїРѕРёРЅС‚С‹
- GET /health вЂ” РїСЂРѕРІРµСЂРєР° Р·РґРѕСЂРѕРІСЊСЏ
  РћС‚РІРµС‚: `{ "status": "ok" }`

- POST /api/v1/integrations/auth/signin вЂ” Р°РІС‚РѕСЂРёР·Р°С†РёСЏ РґР»СЏ GML
  Р—Р°РїСЂРѕСЃ JSON: `{ "Login": "admin", "Password": "admin123" }`
  Р’РѕР·РјРѕР¶РЅС‹Рµ РѕС‚РІРµС‚С‹:
    - 200 OK: `{ "Login": "admin", "UserUuid": "...", "Message": "РЈСЃРїРµС€РЅР°СЏ Р°РІС‚РѕСЂРёР·Р°С†РёСЏ" }`
    - 401 Unauthorized (РЅРµРІРµСЂРЅС‹Рµ РґР°РЅРЅС‹Рµ): `{ "Message": "РќРµРІРµСЂРЅС‹Р№ Р»РѕРіРёРЅ РёР»Рё РїР°СЂРѕР»СЊ" }`
    - 401 Unauthorized (С‚СЂРµР±СѓРµС‚СЃСЏ 2FA): `{ "Message": "Р’РІРµРґРёС‚Рµ РїСЂРѕРІРµСЂРѕС‡РЅС‹Р№ РєРѕРґ 2FA" }`
    - 403 Forbidden (Р±Р°РЅ): `{ "Message": "РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ Р·Р°Р±Р»РѕРєРёСЂРѕРІР°РЅ. РџСЂРёС‡РёРЅР°: ..." }`
    - 404 Not Found (РЅРµС‚ С‚Р°РєРѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ): `{ "Message": "РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ РЅРµ РЅР°Р№РґРµРЅ" }`

РџСЂРёРјРµСЂС‹ curl:
```bash
# РЈСЃРїРµС…
echo '{"Login":"admin","Password":"admin123"}' | \
  curl -s -H "Content-Type: application/json" -d @- http://localhost:5190/api/v1/integrations/auth/signin

# РўСЂРµР±СѓРµС‚СЃСЏ 2FA
echo '{"Login":"tester","Password":"test123"}' | \
  curl -s -H "Content-Type: application/json" -d @- http://localhost:5190/api/v1/integrations/auth/signin
```

- GET /api/news?limit=10&offset=0 вЂ” СЃРїРёСЃРѕРє РЅРѕРІРѕСЃС‚РµР№
  РћС‚РІРµС‚: РјР°СЃСЃРёРІ РѕР±СЉРµРєС‚РѕРІ `{ id, title, description, createdAt }` (ISOвЂ‘8601, UTC)

- GET /metrics вЂ” РјРµС‚СЂРёРєРё Prometheus

## РњРѕРЅРёС‚РѕСЂРёРЅРі
- Prometheus Р·Р°СЂР°РЅРµРµ СЃРєРѕРЅС„РёРіСѓСЂРёСЂРѕРІР°РЅ СЃРѕР±РёСЂР°С‚СЊ РјРµС‚СЂРёРєРё СЃ API Рё СЃР°РјРѕРіРѕ СЃРµР±СЏ (СЃРј. monitoring/prometheus/prometheus.yml).
- Grafana Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё РїРѕР»СѓС‡Р°РµС‚ datasource Prometheus. Р’С…РѕРґ: GRAFANA_ADMIN_USER/GRAFANA_ADMIN_PASSWORD РёР· .env.
- Р•СЃР»Рё РІРєР»СЋС‡РёС‚Рµ Р±Р°Р·РѕРІСѓСЋ Р°РІС‚РѕСЂРёР·Р°С†РёСЋ РІ Prometheus UI, РІР°Рј РјРѕР¶РµС‚ РїРѕРЅР°РґРѕР±РёС‚СЊСЃСЏ РІСЂСѓС‡РЅСѓСЋ РѕР±РЅРѕРІРёС‚СЊ datasource РІ Grafana РёР»Рё
  СЃРєРѕСЂСЂРµРєС‚РёСЂРѕРІР°С‚СЊ provisioning.

## РџСЂРѕРІРµСЂРєР° СЃРєСЂРёРїС‚Р°РјРё
- PowerShell (Windows):
```powershell
./tests/check_api.ps1 -BaseUrl http://localhost:5190
```
- Bash (Linux/macOS):
```bash
./tests/check_api.sh http://localhost:5190
```
РњРѕР¶РЅРѕ С‚Р°РєР¶Рµ Р·Р°РґР°С‚СЊ BASE_URL РїРµСЂРµРјРµРЅРЅРѕР№ РѕРєСЂСѓР¶РµРЅРёСЏ.

## FAQ
- Swagger UI РЅРµ РІРёРґРЅРѕ вЂ” РІРєР»СЋС‡РёС‚Рµ РѕРєСЂСѓР¶РµРЅРёРµ Development (ASPNETCORE_ENVIRONMENT=Development).
- РќРµ РєРѕРЅРЅРµРєС‚РёС‚СЃСЏ Рє Р‘Р” вЂ” РїСЂРѕРІРµСЂСЊС‚Рµ DB_HOST/PORT/USER/PASSWORD. Р’ Docker Compose РёСЃРїРѕР»СЊР·СѓР№С‚Рµ РёРјРµРЅР° СЃРµСЂРІРёСЃРѕРІ (mysql РёР»Рё
  postgres).
- РџРѕСЂС‚С‹ Р·Р°РЅСЏС‚С‹ вЂ” РёР·РјРµРЅРёС‚Рµ API_PORT/GRAFANA_PORT/PROMETHEUS_PORT РІ .env Рё РїРµСЂРµР·Р°РїСѓСЃС‚РёС‚Рµ.
- РЎРёРґвЂ‘Р°РґРјРёРЅ РЅРµ РјРµРЅСЏРµС‚СЃСЏ вЂ” СЃРёРґвЂ‘РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЃРѕР·РґР°С‘С‚СЃСЏ С‚РѕР»СЊРєРѕ РµСЃР»Рё С‚Р°Р±Р»РёС†Р° users Р±С‹Р»Р° РїСѓСЃС‚РѕР№ РЅР° СЃС‚Р°СЂС‚Рµ. РћС‡РёСЃС‚РёС‚Рµ С‚Р°Р±Р»РёС†Сѓ
  РёР»Рё Р±Р°Р·Сѓ Рё РїРµСЂРµР·Р°РїСѓСЃС‚РёС‚Рµ.
- BCryptвЂ‘С…РµС€ РґР»СЏ Prometheus вЂ” СЃРіРµРЅРµСЂРёСЂСѓР№С‚Рµ С‡РµСЂРµР· `htpasswd -nB -C 10 <user>` (Linux/macOS) РёР»Рё РІ WSL/РєРѕРЅС‚РµР№РЅРµСЂРµ.

## Р›РёС†РµРЅР·РёСЏ
РџРѕРєР° РЅРµ Р·Р°РґР°РЅР°. Р”РѕР±Р°РІСЊС‚Рµ С„Р°Р№Р» LICENSE РїСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё.

## Swagger / OpenAPI

Swagger (OpenAPI) РїРѕРґРєР»СЋС‡С‘РЅ Рё СЂР°Р±РѕС‚Р°РµС‚. РџРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РѕРЅ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё РІРєР»СЋС‡Р°РµС‚СЃСЏ РІ РѕРєСЂСѓР¶РµРЅРёРё Development. Р”РѕРїРѕР»РЅРёС‚РµР»СЊРЅРѕ
РјРѕР¶РЅРѕ РІРєР»СЋС‡РёС‚СЊ РµРіРѕ РІ Production С‡РµСЂРµР· РїРµСЂРµРјРµРЅРЅСѓСЋ РѕРєСЂСѓР¶РµРЅРёСЏ.

- Р­РЅРґРїРѕРёРЅС‚С‹:
    - UI: http(s)://<host>/swagger
    - JSON: http(s)://<host>/swagger/v1/swagger.json

- РљР°Рє РІРєР»СЋС‡РёС‚СЊ РІ Production:
    1) Р’ С„Р°Р№Р»Рµ .env Р·Р°РґР°Р№С‚Рµ:
       SWAGGER_ENABLED=true
    2) РџРµСЂРµР·Р°РїСѓСЃС‚РёС‚Рµ СЃРµСЂРІРёСЃ (Р»РѕРєР°Р»СЊРЅРѕ РёР»Рё С‡РµСЂРµР· Docker Compose).

- РњРµС‚Р°РґР°РЅРЅС‹Рµ:
    - Title: ExiledProject CMS API
    - Version: v1

РџСЂРёРјРµС‡Р°РЅРёСЏ:

- Р’ docker-compose РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ ASPNETCORE_ENVIRONMENT=Development, РїРѕСЌС‚РѕРјСѓ Swagger СѓР¶Рµ РґРѕСЃС‚СѓРїРµРЅ РїРѕ /swagger.
- Р•СЃР»Рё РІС‹ РјРµРЅСЏРµС‚Рµ РѕРєСЂСѓР¶РµРЅРёРµ РЅР° Production, РІРєР»СЋС‡Р°Р№С‚Рµ Swagger С‚РѕР»СЊРєРѕ РїСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё (РЅР°РїСЂРёРјРµСЂ, РЅР° СЃС‚РµРЅРґР°С…), РІС‹СЃС‚Р°РІРёРІ
  SWAGGER_ENABLED=true.

---

## Р§С‚Рѕ РЅРѕРІРѕРіРѕ (РїРѕСЃР»РµРґРЅРёРµ РёР·РјРµРЅРµРЅРёСЏ)

- РњРёРЅРёвЂ‘С„СЂРѕРЅС‚РµРЅРґ СЃС‚СЂР°РЅРёС†С‹ Р»РѕРіРёРЅР°: РґРѕСЃС‚СѓРїРЅРѕ РїРѕ /login. РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РїРµСЂРІРёС‡РЅРѕР№ РїСЂРёРІСЏР·РєРё 2FA Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂРѕРј.
- Р РµР°Р»РёР·РѕРІР°РЅ webвЂ‘С„Р»РѕСѓ 2FA (TOTP) СЃ QRвЂ‘РєРѕРґРѕРј: РЅРѕРІС‹Рµ СЌРЅРґРїРѕРёРЅС‚С‹ /api/web/login, /api/web/2fa/start, /api/web/2fa/verify.
    - РџРµСЂРІС‹Р№ Р°РґРјРёРЅ С‚РµРїРµСЂСЊ СЃРѕР·РґР°С‘С‚СЃСЏ Р±РµР· РІРєР»СЋС‡С‘РЅРЅРѕР№ 2FA, РЅРѕ СЃ С„Р»Р°РіРѕРј MustSetup2FA=true вЂ” РІС…РѕРґ РІ Р°РєРєР°СѓРЅС‚ Р±Р»РѕРєРёСЂСѓРµС‚СЃСЏ, РїРѕРєР°
      2FA РЅРµ Р±СѓРґРµС‚ РїСЂРёРІСЏР·Р°РЅР°.
- Docker Compose: РѕРїС†РёРѕРЅР°Р»СЊРЅС‹Р№ phpMyAdmin, РІРєР»СЋС‡Р°РµС‚СЃСЏ РїСЂРѕС„РёР»РµРј pma РІРјРµСЃС‚Рµ СЃ mysql. РџРѕСЂС‚ Р·Р°РґР°С‘С‚СЃСЏ PHPMYADMIN_PORT.
- Prometheus: РїРµСЂРµРµР·Рґ РЅР° entrypointвЂ‘СЃРєСЂРёРїС‚, СЃС‚Р°Р±РёР»СЊРЅС‹Р№ Р·Р°РїСѓСЃРє Рё РѕРїС†РёРѕРЅР°Р»СЊРЅР°СЏ Р±Р°Р·РѕРІР°СЏ Р°РІС‚РѕСЂРёР·Р°С†РёСЏ.
- MySQL: РµСЃР»Рё DB_USER=root РІ .env, API Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё РёСЃРїРѕР»СЊР·СѓРµС‚ MYSQL_ROOT_PASSWORD РґР»СЏ РїРѕРґРєР»СЋС‡РµРЅРёСЏ.
- Р”РѕР±Р°РІР»РµРЅС‹ РїРµСЂРµРјРµРЅРЅС‹Рµ РѕРєСЂСѓР¶РµРЅРёСЏ: SWAGGER_ENABLED (РІРєР»СЋС‡РµРЅРёРµ Swagger РІРЅРµ Development), HTTPS_REDIRECT_ENABLED (
  РЅРµРїСЂРёРЅСѓРґРёС‚РµР»СЊРЅРѕРµ РїРµСЂРµРЅР°РїСЂР°РІР»РµРЅРёРµ РЅР° HTTPS РІ РєРѕРЅС‚РµР№РЅРµСЂР°С… РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РІС‹РєР»СЋС‡РµРЅРѕ).
- Р”РѕР±Р°РІР»РµРЅ SQLвЂ‘СЃРєСЂРёРїС‚ РґР»СЏ РѕС‡РёСЃС‚РєРё С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С…: tests/cleanup_db_mysql.sql.

---

## РњРёРЅРёвЂ‘С„СЂРѕРЅС‚РµРЅРґ (СЃС‚СЂР°РЅРёС†Р° Р»РѕРіРёРЅР°)

**Р’РЅРёРјР°РЅРёРµ!**  
РњРёРЅРё-С„СЂРѕРЅС‚РµРЅРґ РЅР° С‡РёСЃС‚РѕРј HTML СѓРґР°Р»С‘РЅ. РўРµРїРµСЂСЊ СЃС‚СЂР°РЅРёС†Р° Р»РѕРіРёРЅР° СЂРµР°Р»РёР·СѓРµС‚СЃСЏ РєР°Рє РѕС‚РґРµР»СЊРЅРѕРµ SPA-РїСЂРёР»РѕР¶РµРЅРёРµ РЅР° Vue.js  
(СЃРј. РїР°РїРєСѓ `frontend/`).

- Р“РґРµ РЅР°Р№С‚Рё РёСЃС…РѕРґРЅРёРєРё: `frontend/`
- РљР°Рє Р·Р°РїСѓСЃРєР°С‚СЊ: СЃС‚Р°РЅРґР°СЂС‚РЅС‹Р№ Vue.js workflow (`npm install`, `npm run dev` РёР»Рё `npm run build`)
- РљР°Рє РїРѕРґРєР»СЋС‡РёС‚СЊ Рє API: РЅР°СЃС‚СЂРѕР№С‚Рµ РїРµСЂРµРјРµРЅРЅСѓСЋ РѕРєСЂСѓР¶РµРЅРёСЏ VITE_API_BASE_URL РёР»Рё Р°РЅР°Р»РѕРіРёС‡РЅСѓСЋ РІ .env С„СЂРѕРЅС‚Р°.

---

## РќРѕРІС‹Рµ webвЂ‘СЌРЅРґРїРѕРёРЅС‚С‹ (2FA)

- POST /api/web/login
  РўРµР»Рѕ: { "login": "admin", "password": "..." }
  РћС‚РІРµС‚С‹:
    - 200 OK вЂ” СѓСЃРїРµС… (РґРµРјРѕвЂ‘С„Р»РѕСѓ)
    - 401 вЂ” С‚СЂРµР±СѓРµС‚СЃСЏ РІРІРѕРґ РєРѕРґР° 2FA (Next=enter-2fa)
    - 403 вЂ” РЅСѓР¶РЅРѕ СЃРЅР°С‡Р°Р»Р° РїСЂРёРІСЏР·Р°С‚СЊ 2FA (Next=setup-2fa) РёР»Рё Р°РєРєР°СѓРЅС‚ Р·Р°Р±Р»РѕРєРёСЂРѕРІР°РЅ

- POST /api/web/2fa/start
  РўРµР»Рѕ: { "login": "admin", "issuer": "ExiledCMS" }
  РћС‚РІРµС‚ 200: { "Secret": "BASE32...", "OtpauthUri": "otpauth://...", "QrCodeDataUrl": "data:image/png;base64,..." }

- POST /api/web/2fa/verify
  РўРµР»Рѕ: { "login": "admin", "code": "123456" }
  РћС‚РІРµС‚С‹:
    - 200 OK: { "Message": "2FA СѓСЃРїРµС€РЅРѕ РїСЂРёРІСЏР·Р°РЅР°" } (РїРѕСЃР»Рµ СЌС‚РѕРіРѕ Require2FA=true, MustSetup2FA=false)
    - 401: { "Message": "РќРµРІРµСЂРЅС‹Р№ РєРѕРґ 2FA" }

**Р’РµСЃСЊ webвЂ‘С„Р»РѕСѓ С‚РµРїРµСЂСЊ СЂРµР°Р»РёР·СѓРµС‚СЃСЏ РЅР° Vue.js SPA.**

---

## phpMyAdmin (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)

phpMyAdmin РґРѕР±Р°РІР»РµРЅ РІ docker-compose Рё РІРєР»СЋС‡Р°РµС‚СЃСЏ С‚РѕР»СЊРєРѕ РїСЂРё РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРё РїСЂРѕС„РёР»СЏ pma РІРјРµСЃС‚Рµ СЃ mysql.

- Р—Р°РїСѓСЃРє (РїСЂРёРјРµСЂ):

```bash
# API + MySQL + Prometheus + Grafana + phpMyAdmin
docker compose --profile mysql --profile pma up -d
```

- Р”РѕСЃС‚СѓРї: http://localhost:${PHPMYADMIN_PORT:-8081}
- Р›РѕРіРёРЅ/РїР°СЂРѕР»СЊ: С‚РµРїРµСЂСЊ РІСЃРµРіРґР° Р·Р°РїСЂР°С€РёРІР°СЋС‚СЃСЏ РЅР° СЌРєСЂР°РЅРµ РІС…РѕРґР° (РјС‹ РЅРµ РїРµСЂРµРґР°С‘Рј PMA_USER/PMA_PASSWORD РІ РєРѕРЅС‚РµР№РЅРµСЂ).
  Р’РІРµРґРёС‚Рµ СѓС‡С‘С‚РЅС‹Рµ РґР°РЅРЅС‹Рµ РІР°С€РµР№ Р‘Р”:
    - РµСЃР»Рё РёСЃРїРѕР»СЊР·СѓРµС‚Рµ РЅРµ-root РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ: DB_USER / DB_PASSWORD РёР· .env (Рё СЌС‚РѕС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РґРѕР»Р¶РµРЅ СЃСѓС‰РµСЃС‚РІРѕРІР°С‚СЊ РІ
      Р‘Р”);
    - РµСЃР»Рё РІС…РѕРґРёС‚Рµ РїРѕРґ root: Р»РѕРіРёРЅ root Рё РїР°СЂРѕР»СЊ MYSQL_ROOT_PASSWORD (РёР· .env, РїСЂРѕС„РёР»СЊ mysql).
- РџРµСЂРµРјРµРЅРЅР°СЏ РїРѕСЂС‚Р°: PHPMYADMIN_PORT РІ .env (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ 8081).

РџСЂРёРјРµС‡Р°РЅРёРµ: phpMyAdmin РІРѕРѕР±С‰Рµ РЅРµ Р·Р°РїСѓСЃРєР°РµС‚СЃСЏ, РµСЃР»Рё РІС‹ РёСЃРїРѕР»СЊР·СѓРµС‚Рµ PostgreSQL РёР»Рё Р»РѕРєР°Р»СЊРЅСѓСЋ Р‘Р” РІРЅРµ РєРѕРЅС‚РµР№РЅРµСЂРѕРІ Рё РЅРµ
РІРєР»СЋС‡РёР»Рё РїСЂРѕС„РёР»СЊ pma.

---

## РћС‡РёСЃС‚РєР° С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С… (MySQL)

Р”РѕР±Р°РІР»РµРЅ SQLвЂ‘СЃРєСЂРёРїС‚ tests/cleanup_db_mysql.sql РґР»СЏ Р±С‹СЃС‚СЂРѕР№ РѕС‡РёСЃС‚РєРё РґРµРјРѕвЂ‘РґР°РЅРЅС‹С… (СЃРёРґРѕРІ). Р’РЅРёРјР°РЅРёРµ: РѕРїРµСЂР°С†РёСЏ
СЂР°Р·СЂСѓС€РёС‚РµР»СЊРЅР°СЏ.

РџСЂРёРјРµСЂ РІС‹РїРѕР»РЅРµРЅРёСЏ РёР· С…РѕСЃС‚Р°:

```bash
# РСЃРїРѕР»СЊР·СѓСЏ docker compose (РєРѕРЅС‚РµР№РЅРµСЂ mysql)
docker exec -i mysql mysql -uroot -p"$MYSQL_ROOT_PASSWORD" "$DB_NAME" < tests/cleanup_db_mysql.sql
```

РР»Рё С‡РµСЂРµР· Р»СЋР±РѕР№ MySQLвЂ‘РєР»РёРµРЅС‚/IDE/phpMyAdmin вЂ” РїСЂРѕСЃС‚Рѕ РІС‹РїРѕР»РЅРёС‚Рµ СЃРѕРґРµСЂР¶РёРјРѕРµ С„Р°Р№Р»Р° РїСЂРѕС‚РёРІ РІР°С€РµР№ Р±Р°Р·С‹.

---

## Р”РѕРїРѕР»РЅРµРЅРёСЏ Рє РєРѕРЅС„РёРіСѓСЂР°С†РёРё (.env)

РќРѕРІС‹Рµ/СѓС‚РѕС‡РЅС‘РЅРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ:

- SWAGGER_ENABLED=true|false вЂ” РІРєР»СЋС‡РµРЅРёРµ Swagger РІРЅРµ РѕРєСЂСѓР¶РµРЅРёСЏ Development.
- HTTPS_REDIRECT_ENABLED=true|false вЂ” РІРєР»СЋС‡Р°РµС‚ middleware РїРµСЂРµРЅР°РїСЂР°РІР»РµРЅРёСЏ РЅР° HTTPS (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ false РІ РєРѕРЅС‚РµР№РЅРµСЂР°С…).
- PHPMYADMIN_PORT=8081 вЂ” РїРѕСЂС‚ РґР»СЏ phpMyAdmin, РєРѕРіРґР° РІРєР»СЋС‡С‘РЅ РїСЂРѕС„РёР»СЊ pma.
- РћСЃРѕР±РµРЅРЅРѕСЃС‚СЊ РґР»СЏ MySQL: РµСЃР»Рё DB_USER=root, API РёСЃРїРѕР»СЊР·СѓРµС‚ MYSQL_ROOT_PASSWORD РґР»СЏ РїРѕРґРєР»СЋС‡РµРЅРёСЏ (РґР°Р¶Рµ РµСЃР»Рё DB_PASSWORD
  СѓРєР°Р·Р°РЅ РёРЅР°С‡Рµ) вЂ” СЌС‚Рѕ СѓРїСЂРѕС‰Р°РµС‚ Р·Р°РїСѓСЃРє РІ Docker Compose.

---


---

### РћР±РЅРѕРІР»РµРЅРёРµ РїСЂРёРјРµСЂР° .env

Р’ .env.example РґРѕР±Р°РІР»РµРЅС‹/СѓС‚РѕС‡РЅРµРЅС‹ РїРµСЂРµРјРµРЅРЅС‹Рµ:

- MYSQL_PORT вЂ” РїСЂРѕР±СЂРѕСЃ РїРѕСЂС‚Р° MySQL РІ Docker Compose (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ 3306).
- POSTGRES_PORT вЂ” РїСЂРѕР±СЂРѕСЃ РїРѕСЂС‚Р° PostgreSQL РІ Docker Compose (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ 5432).
- PHPMYADMIN_PORT вЂ” РїРѕСЂС‚ phpMyAdmin (Р°РєС‚РёРІРµРЅ РїСЂРё Р·Р°РїСѓСЃРєРµ РїСЂРѕС„РёР»СЏ pma), РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ 8081.
- GRAFANA_INSTALL_PLUGINS вЂ” СЃРїРёСЃРѕРє РїР»Р°РіРёРЅРѕРІ Grafana РґР»СЏ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРѕР№ СѓСЃС‚Р°РЅРѕРІРєРё (РЅРµРѕР±СЏР·Р°С‚РµР»СЊРЅРѕ).
- РџРѕРґСЃРєР°Р·РєР° РїРѕ ASPNETCORE_ENVIRONMENT вЂ” РјРѕР¶РЅРѕ СѓСЃС‚Р°РЅРѕРІРёС‚СЊ Development, С‡С‚РѕР±С‹ РІСЃРµРіРґР° Р±С‹Р» РґРѕСЃС‚СѓРїРµРЅ Swagger РІ РєРѕРЅС‚РµР№РЅРµСЂРµ.

РќР°РїРѕРјРёРЅР°РЅРёРµ РїРѕ Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё Prometheus UI:

- Р§С‚РѕР±С‹ Prometheus С‚СЂРµР±РѕРІР°Р» Р»РѕРіРёРЅ/РїР°СЂРѕР»СЊ, Р·Р°РґР°Р№С‚Рµ РІ .env РѕР±Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ: PROMETHEUS_WEB_USER Рё
  PROMETHEUS_WEB_PASSWORD_BCRYPT
  (РїР°СЂРѕР»СЊ РІ bcrypt; СЃРіРµРЅРµСЂРёСЂСѓР№С‚Рµ С‡РµСЂРµР· htpasswd -nB -C 10 <user>). Р•СЃР»Рё РїРµСЂРµРјРµРЅРЅС‹Рµ РЅРµ Р·Р°РґР°РЅС‹, UI Р±СѓРґРµС‚ РґРѕСЃС‚СѓРїРµРЅ Р±РµР·
  Р°РІС‚РѕСЂРёР·Р°С†РёРё.


