# Nginx SSL Configuration for ExiledProjectCMS
# Secure load balancing with inter-service SSL

# Upstream definitions with SSL
upstream cms_api_backend {
    least_conn;
    server cms-api:8443 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream go_api_backend {
    least_conn;
    server go-api:8443 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream skins_service_backend {
    least_conn;
    server skins-service:8443 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream email_service_backend {
    least_conn;
    server email-service:8443 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream admin_panel_backend {
    least_conn;
    server admin-panel:443 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream webapp_backend {
    least_conn;
    server webapp:443 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# SSL configuration template
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
ssl_prefer_server_ciphers on;
ssl_ecdh_curve secp384r1;
ssl_session_timeout 10m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_dhparam /etc/ssl/certs/dhparam.pem;

# OCSP stapling
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

# Security headers
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
add_header X-Content-Type-Options nosniff always;
add_header X-Frame-Options DENY always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Client certificate configuration for internal communication
ssl_client_certificate /etc/ssl/certs/ca.crt;
ssl_verify_client optional;

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

    # Server SSL certificate
    ssl_certificate /etc/ssl/certs/nginx.crt;
    ssl_certificate_key /etc/ssl/private/nginx.key;
    ssl_trusted_certificate /etc/ssl/certs/ca.crt;

    # Proxy SSL configuration for backend services
    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/ssl/certs/ca.crt;
    proxy_ssl_certificate /etc/ssl/certs/clients/internal-client-client.crt;
    proxy_ssl_certificate_key /etc/ssl/private/clients/internal-client-client.key;
    proxy_ssl_protocols TLSv1.2 TLSv1.3;
    proxy_ssl_server_name on;

    # Proxy settings
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_cache_bypass $http_upgrade;

    # API routes
    location /api/v1/go/ {
        proxy_pass https://go_api_backend/api/v1/;
        proxy_ssl_name go-api.exiled.local;
    }

    location /api/v1/skins/ {
        proxy_pass https://skins_service_backend/api/v1/;
        proxy_ssl_name skins-service.exiled.local;
    }

    location /api/v1/email/ {
        proxy_pass https://email_service_backend/api/v1/;
        proxy_ssl_name email-service.exiled.local;
    }

    location /api/ {
        proxy_pass https://cms_api_backend/api/;
        proxy_ssl_name cms-api.exiled.local;
    }

    # Admin panel
    location /admin/ {
        proxy_pass https://admin_panel_backend/;
        proxy_ssl_name admin-panel.exiled.local;
    }

    # Main website
    location / {
        proxy_pass https://webapp_backend/;
        proxy_ssl_name webapp.exiled.local;
    }

    # Health check endpoint (no SSL to backend)
    location /health {
        proxy_pass http://cms-api:8080/health;
        proxy_ssl_verify off;
    }
}

# Internal SSL server for service-to-service communication
server {
    listen 8443 ssl http2;
    server_name nginx.exiled.local nginx;

    # Server SSL certificate
    ssl_certificate /etc/ssl/certs/nginx.crt;
    ssl_certificate_key /etc/ssl/private/nginx.key;
    ssl_trusted_certificate /etc/ssl/certs/ca.crt;

    # Require client certificates for internal communication
    ssl_verify_client on;

    # Internal API routes (stricter access control)
    location /internal/api/ {
        # Only allow requests with valid client certificates
        if ($ssl_client_verify != SUCCESS) {
            return 403;
        }

        proxy_pass https://cms_api_backend/api/internal/;
        proxy_ssl_name cms-api.exiled.local;
        proxy_ssl_verify on;
        proxy_ssl_trusted_certificate /etc/ssl/certs/ca.crt;
        proxy_ssl_certificate /etc/ssl/certs/clients/internal-client-client.crt;
        proxy_ssl_certificate_key /etc/ssl/private/clients/internal-client-client.key;
    }

    # Internal metrics and monitoring
    location /internal/metrics {
        if ($ssl_client_verify != SUCCESS) {
            return 403;
        }

        proxy_pass https://go_api_backend/metrics;
        proxy_ssl_name go-api.exiled.local;
    }
}

# HTTP server (redirect to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

    # Allow health checks over HTTP
    location /health {
        proxy_pass http://cms-api:8080/health;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Internal HTTP server for health checks
server {
    listen 8080;
    server_name localhost;

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Status page for monitoring
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
}